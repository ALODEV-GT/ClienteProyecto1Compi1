
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorDef.cup;

import java_cup.runtime.Symbol;
import analizadorDef.tablaSimbolos.TablaSimbolosDef;
import analizadorDef.tablaSimbolos.TerminoDef;
import analizadorDef.tablaSimbolos.RolDef;
import analizadorJson.tablaSimbolos.RolJson;
import analizadorJson.tablaSimbolos.TablaSimbolosJson;
import analizadorDef.tablaSimbolos.Entero;
import analizadorDef.tablaSimbolos.Cadena;
import analizadorJson.tablaSimbolos.TerminoJson;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\322\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\117\002\000\002\002\006\000\002\120\002" +
    "\000\002\003\005\000\002\121\002\000\002\003\005\000" +
    "\002\003\003\000\002\122\002\000\002\004\005\000\002" +
    "\004\003\000\002\005\004\000\002\123\002\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\006\004" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\004\000\002\010\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\011\004\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\124\002\000\002" +
    "\013\005\000\002\125\002\000\002\013\005\000\002\126" +
    "\002\000\002\013\005\000\002\127\002\000\002\013\005" +
    "\000\002\013\003\000\002\016\004\000\002\016\002\000" +
    "\002\130\002\000\002\017\005\000\002\131\002\000\002" +
    "\017\005\000\002\017\003\000\002\020\004\000\002\020" +
    "\003\000\002\021\004\000\002\021\002\000\002\022\003" +
    "\000\002\022\003\000\002\023\004\000\002\023\002\000" +
    "\002\132\002\000\002\024\005\000\002\133\002\000\002" +
    "\024\005\000\002\024\003\000\002\025\004\000\002\025" +
    "\003\000\002\026\004\000\002\026\002\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\004\000\002\030\002\000\002\134\002\000\002" +
    "\031\005\000\002\135\002\000\002\031\005\000\002\031" +
    "\003\000\002\032\004\000\002\032\003\000\002\033\004" +
    "\000\002\033\002\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\004\000\002" +
    "\035\002\000\002\136\002\000\002\036\005\000\002\137" +
    "\002\000\002\036\005\000\002\036\003\000\002\037\004" +
    "\000\002\037\003\000\002\040\004\000\002\040\002\000" +
    "\002\041\003\000\002\041\003\000\002\042\004\000\002" +
    "\042\003\000\002\043\004\000\002\043\003\000\002\044" +
    "\004\000\002\044\004\000\002\044\003\000\002\045\004" +
    "\000\002\045\004\000\002\045\004\000\002\045\004\000" +
    "\002\045\003\000\002\047\004\000\002\050\004\000\002" +
    "\051\004\000\002\052\004\000\002\053\004\000\002\054" +
    "\004\000\002\055\004\000\002\056\004\000\002\056\003" +
    "\000\002\106\003\000\002\106\003\000\002\063\004\000" +
    "\002\063\003\000\002\064\004\000\002\064\004\000\002" +
    "\064\003\000\002\065\004\000\002\065\003\000\002\066" +
    "\003\000\002\066\003\000\002\057\004\000\002\057\003" +
    "\000\002\060\004\000\002\060\004\000\002\060\003\000" +
    "\002\061\004\000\002\061\003\000\002\062\003\000\002" +
    "\062\003\000\002\101\004\000\002\101\003\000\002\102" +
    "\004\000\002\102\004\000\002\102\004\000\002\102\003" +
    "\000\002\105\004\000\002\105\004\000\002\105\004\000" +
    "\002\105\004\000\002\105\004\000\002\105\003\000\002" +
    "\103\004\000\002\103\003\000\002\104\003\000\002\104" +
    "\003\000\002\067\004\000\002\067\003\000\002\070\004" +
    "\000\002\070\004\000\002\070\004\000\002\070\003\000" +
    "\002\073\004\000\002\073\004\000\002\073\004\000\002" +
    "\073\003\000\002\071\004\000\002\071\003\000\002\072" +
    "\003\000\002\072\003\000\002\074\004\000\002\074\003" +
    "\000\002\075\004\000\002\075\004\000\002\075\004\000" +
    "\002\075\003\000\002\100\004\000\002\100\004\000\002" +
    "\100\004\000\002\100\003\000\002\076\004\000\002\076" +
    "\003\000\002\077\003\000\002\077\003\000\002\107\004" +
    "\000\002\107\003\000\002\110\004\000\002\110\004\000" +
    "\002\110\004\000\002\110\003\000\002\113\004\000\002" +
    "\113\004\000\002\113\004\000\002\113\004\000\002\113" +
    "\003\000\002\111\004\000\002\111\003\000\002\112\003" +
    "\000\002\112\003\000\002\114\004\000\002\115\004\000" +
    "\002\115\004\000\002\115\003\000\002\116\003\000\002" +
    "\116\003\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\014\003\010\016\007\021\005\042\011\057" +
    "\006\001\002\000\014\003\010\016\007\021\005\042\011" +
    "\057\006\001\002\000\006\003\ufffe\024\ufffe\001\002\000" +
    "\006\003\ufffa\021\ufffa\001\002\000\006\003\ufffc\021\ufffc" +
    "\001\002\000\014\003\ufff8\016\ufff8\021\ufff8\042\ufff8\057" +
    "\ufff8\001\002\000\006\003\014\046\016\001\002\000\004" +
    "\002\013\001\002\000\004\002\001\001\002\000\004\002" +
    "\uff9a\001\002\000\004\002\uffff\001\002\000\006\003\020" +
    "\043\017\001\002\000\010\003\022\041\025\042\023\001" +
    "\002\000\004\002\uff98\001\002\000\004\002\uff9b\001\002" +
    "\000\004\002\uff95\001\002\000\014\003\043\047\045\050" +
    "\044\051\042\055\037\001\002\000\004\002\uff99\001\002" +
    "\000\006\003\026\046\030\001\002\000\004\002\uff87\001" +
    "\002\000\004\002\uff96\001\002\000\006\003\033\043\032" +
    "\001\002\000\004\002\uff88\001\002\000\004\002\uff31\001" +
    "\002\000\004\002\uff30\001\002\000\010\003\022\041\025" +
    "\042\023\001\002\000\010\003\022\041\025\042\023\001" +
    "\002\000\010\003\022\041\025\042\023\001\002\000\006" +
    "\003\u0109\043\u0108\001\002\000\010\003\022\041\025\042" +
    "\023\001\002\000\004\002\uff97\001\002\000\006\003\243" +
    "\043\242\001\002\000\004\002\uff90\001\002\000\006\003" +
    "\225\043\224\001\002\000\006\003\047\043\046\001\002" +
    "\000\010\003\053\041\055\044\051\001\002\000\012\003" +
    "\uff83\041\uff83\042\uff83\044\uff83\001\002\000\012\003\uff8f" +
    "\041\uff8f\042\uff8f\044\uff8f\001\002\000\010\003\067\004" +
    "\071\021\065\001\002\000\010\003\053\041\055\044\051" +
    "\001\002\000\012\003\uff80\041\uff80\042\uff80\044\uff80\001" +
    "\002\000\012\003\uff84\041\uff84\042\uff84\044\uff84\001\002" +
    "\000\006\003\057\047\060\001\002\000\012\003\uff82\041" +
    "\uff82\042\uff82\044\uff82\001\002\000\012\003\uff7e\041\uff7e" +
    "\042\uff7e\044\uff7e\001\002\000\006\003\063\043\061\001" +
    "\002\000\012\003\uff7d\041\uff7d\042\uff7d\044\uff7d\001\002" +
    "\000\012\003\uff7f\041\uff7f\042\uff7f\044\uff7f\001\002\000" +
    "\012\003\uff7c\041\uff7c\042\uff7c\044\uff7c\001\002\000\012" +
    "\003\uff81\041\uff81\042\uff81\044\uff81\001\002\000\006\003" +
    "\221\045\222\001\002\000\012\003\uff37\041\uff37\042\uff37" +
    "\044\uff37\001\002\000\012\003\uff34\041\uff34\042\uff34\044" +
    "\uff34\001\002\000\006\003\221\045\222\001\002\000\006" +
    "\003\073\026\072\001\002\000\016\003\075\005\102\006" +
    "\077\007\100\013\103\015\101\001\002\000\022\003\uffde" +
    "\025\uffde\032\uffde\035\uffde\036\uffde\037\uffde\040\uffde\045" +
    "\uffde\001\002\000\022\003\uffe0\025\uffe0\032\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\045\uffe0\001\002\000\022\003" +
    "\uffd4\025\uffd4\032\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\045\uffd4\001\002\000\022\003\uffdf\025\uffdf\032\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\045\uffdf\001\002\000\024" +
    "\003\uffdc\025\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\045\uffdc\001\002\000\024\003\uffda\025\uffda" +
    "\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda\040\uffda\045" +
    "\uffda\001\002\000\024\003\uffd6\025\uffd6\032\uffd6\033\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\045\uffd6\001\002\000" +
    "\022\003\uffdd\025\uffdd\032\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\045\uffdd\001\002\000\024\003\uffd8\025\uffd8\032" +
    "\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\045\uffd8" +
    "\001\002\000\024\003\uffb6\025\uffb6\032\uffb6\033\106\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\045\uffb6\001\002\000\022" +
    "\003\uffd7\025\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\045\uffd7\001\002\000\010\003\111\021\107\023\112" +
    "\001\002\000\006\003\uffb3\034\uffb3\001\002\000\022\003" +
    "\uffb7\025\uffb7\032\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\045\uffb7\001\002\000\022\003\uffb1\025\uffb1\032\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\045\uffb1\001\002\000\006" +
    "\003\uffb5\034\uffb5\001\002\000\006\003\115\034\116\001" +
    "\002\000\022\003\uffb4\025\uffb4\032\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\045\uffb4\001\002\000\022\003\uffaf\025" +
    "\uffaf\032\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\045\uffaf" +
    "\001\002\000\024\003\uffad\025\uffad\026\117\032\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\045\uffad\001\002\000\012" +
    "\003\122\010\124\011\125\014\123\001\002\000\022\003" +
    "\uffb0\025\uffb0\032\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\045\uffb0\001\002\000\022\003\uffae\025\uffae\032\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\045\uffae\001\002\000\022" +
    "\003\uffa9\025\uffa9\032\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\045\uffa9\001\002\000\022\003\uffaa\025\uffaa\032\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\045\uffaa\001\002\000" +
    "\022\003\uffac\025\uffac\032\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\045\uffac\001\002\000\022\003\uffab\025\uffab\032" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\045\uffab\001\002" +
    "\000\006\003\115\034\116\001\002\000\022\003\uffb2\025" +
    "\uffb2\032\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\045\uffb2" +
    "\001\002\000\024\003\uffa7\025\uffa7\032\uffa7\033\132\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\045\uffa7\001\002\000\022" +
    "\003\uffd5\025\uffd5\032\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\045\uffd5\001\002\000\010\003\134\021\133\023\136" +
    "\001\002\000\006\003\uffa4\034\uffa4\001\002\000\022\003" +
    "\uffa2\025\uffa2\032\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\045\uffa2\001\002\000\022\003\uffa8\025\uffa8\032\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\045\uffa8\001\002\000\006" +
    "\003\uffa6\034\uffa6\001\002\000\006\003\140\034\142\001" +
    "\002\000\022\003\uffa0\025\uffa0\032\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\045\uffa0\001\002\000\022\003\uffa5\025" +
    "\uffa5\032\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\045\uffa5" +
    "\001\002\000\024\003\uff9e\025\uff9e\026\143\032\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\045\uff9e\001\002\000\006" +
    "\003\146\056\145\001\002\000\022\003\uffa1\025\uffa1\032" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\045\uffa1\001\002" +
    "\000\022\003\uff9d\025\uff9d\032\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\045\uff9d\001\002\000\022\003\uff9c\025\uff9c" +
    "\032\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\045\uff9c\001" +
    "\002\000\022\003\uff9f\025\uff9f\032\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\045\uff9f\001\002\000\006\003\140\034" +
    "\142\001\002\000\022\003\uffa3\025\uffa3\032\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\045\uffa3\001\002\000\024\003" +
    "\uffc5\025\uffc5\032\uffc5\033\154\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\045\uffc5\001\002\000\022\003\uffd9\025\uffd9\032" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\045\uffd9\001\002" +
    "\000\010\003\157\021\155\023\160\001\002\000\006\003" +
    "\uffc2\034\uffc2\001\002\000\022\003\uffc6\025\uffc6\032\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\045\uffc6\001\002\000" +
    "\022\003\uffc0\025\uffc0\032\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\045\uffc0\001\002\000\006\003\uffc4\034\uffc4\001" +
    "\002\000\006\003\163\034\164\001\002\000\022\003\uffc3" +
    "\025\uffc3\032\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\045" +
    "\uffc3\001\002\000\022\003\uffbe\025\uffbe\032\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\045\uffbe\001\002\000\024\003" +
    "\uffbc\025\uffbc\026\165\032\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\045\uffbc\001\002\000\012\003\167\010\171\011" +
    "\173\012\170\001\002\000\022\003\uffbf\025\uffbf\032\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\045\uffbf\001\002\000" +
    "\022\003\uffb8\025\uffb8\032\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\045\uffb8\001\002\000\022\003\uffb9\025\uffb9\032" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\045\uffb9\001\002" +
    "\000\022\003\uffbb\025\uffbb\032\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\045\uffbb\001\002\000\022\003\uffbd\025\uffbd" +
    "\032\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\045\uffbd\001" +
    "\002\000\022\003\uffba\025\uffba\032\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\045\uffba\001\002\000\006\003\163\034" +
    "\164\001\002\000\022\003\uffc1\025\uffc1\032\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\045\uffc1\001\002\000\024\003" +
    "\uffd2\025\uffd2\032\uffd2\033\200\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\045\uffd2\001\002\000\022\003\uffdb\025\uffdb\032" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\045\uffdb\001\002" +
    "\000\010\003\202\021\201\023\204\001\002\000\006\003" +
    "\uffcf\034\uffcf\001\002\000\022\003\uffcd\025\uffcd\032\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\045\uffcd\001\002\000" +
    "\022\003\uffd3\025\uffd3\032\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\045\uffd3\001\002\000\006\003\uffd1\034\uffd1\001" +
    "\002\000\006\003\206\034\210\001\002\000\022\003\uffcb" +
    "\025\uffcb\032\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\045" +
    "\uffcb\001\002\000\022\003\uffd0\025\uffd0\032\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\045\uffd0\001\002\000\024\003" +
    "\uffc9\025\uffc9\026\211\032\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\045\uffc9\001\002\000\006\003\214\010\215\001" +
    "\002\000\022\003\uffcc\025\uffcc\032\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\045\uffcc\001\002\000\022\003\uffca\025" +
    "\uffca\032\uffca\035\uffca\036\uffca\037\uffca\040\uffca\045\uffca" +
    "\001\002\000\022\003\uffc7\025\uffc7\032\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\045\uffc7\001\002\000\022\003\uffc8" +
    "\025\uffc8\032\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\045" +
    "\uffc8\001\002\000\006\003\206\034\210\001\002\000\022" +
    "\003\uffce\025\uffce\032\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\045\uffce\001\002\000\012\003\uff36\041\uff36\042\uff36" +
    "\044\uff36\001\002\000\012\003\uff32\041\uff32\042\uff32\044" +
    "\uff32\001\002\000\012\003\uff33\041\uff33\042\uff33\044\uff33" +
    "\001\002\000\012\003\uff35\041\uff35\042\uff35\044\uff35\001" +
    "\002\000\010\003\227\041\232\044\051\001\002\000\012" +
    "\003\uff7a\041\uff7a\042\uff7a\044\uff7a\001\002\000\012\003" +
    "\uff8e\041\uff8e\042\uff8e\044\uff8e\001\002\000\012\003\uff77" +
    "\041\uff77\042\uff77\044\uff77\001\002\000\010\003\227\041" +
    "\232\044\051\001\002\000\012\003\uff7b\041\uff7b\042\uff7b" +
    "\044\uff7b\001\002\000\006\003\234\050\235\001\002\000" +
    "\012\003\uff79\041\uff79\042\uff79\044\uff79\001\002\000\012" +
    "\003\uff75\041\uff75\042\uff75\044\uff75\001\002\000\006\003" +
    "\240\043\236\001\002\000\012\003\uff74\041\uff74\042\uff74" +
    "\044\uff74\001\002\000\012\003\uff76\041\uff76\042\uff76\044" +
    "\uff76\001\002\000\012\003\uff73\041\uff73\042\uff73\044\uff73" +
    "\001\002\000\012\003\uff78\041\uff78\042\uff78\044\uff78\001" +
    "\002\000\012\003\250\041\251\042\247\044\051\001\002" +
    "\000\010\003\uff45\041\uff45\042\uff45\001\002\000\010\003" +
    "\uff8c\041\uff8c\042\uff8c\001\002\000\010\003\uff46\041\uff46" +
    "\042\uff46\001\002\000\012\003\250\041\251\042\247\044" +
    "\051\001\002\000\014\003\266\047\045\050\044\052\261" +
    "\055\037\001\002\000\010\003\uff41\041\uff41\042\uff41\001" +
    "\002\000\006\003\253\051\254\001\002\000\010\003\uff44" +
    "\041\uff44\042\uff44\001\002\000\010\003\uff3a\041\uff3a\042" +
    "\uff3a\001\002\000\006\003\257\043\256\001\002\000\010" +
    "\003\uff3b\041\uff3b\042\uff3b\001\002\000\010\003\uff39\041" +
    "\uff39\042\uff39\001\002\000\010\003\uff38\041\uff38\042\uff38" +
    "\001\002\000\010\003\uff42\041\uff42\042\uff42\001\002\000" +
    "\006\003\275\043\274\001\002\000\012\003\250\041\251" +
    "\042\247\044\051\001\002\000\012\003\250\041\251\042" +
    "\247\044\051\001\002\000\012\003\250\041\251\042\247" +
    "\044\051\001\002\000\012\003\250\041\251\042\247\044" +
    "\051\001\002\000\010\003\uff3c\041\uff3c\042\uff3c\001\002" +
    "\000\010\003\uff40\041\uff40\042\uff40\001\002\000\010\003" +
    "\uff3d\041\uff3d\042\uff3d\001\002\000\010\003\uff3f\041\uff3f" +
    "\042\uff3f\001\002\000\010\003\uff3e\041\uff3e\042\uff3e\001" +
    "\002\000\012\003\uff8b\041\uff8b\042\uff8b\044\uff8b\001\002" +
    "\000\012\003\301\041\302\042\300\044\051\001\002\000" +
    "\012\003\uff71\041\uff71\042\uff71\044\uff71\001\002\000\012" +
    "\003\uff72\041\uff72\042\uff72\044\uff72\001\002\000\012\003" +
    "\301\041\302\042\300\044\051\001\002\000\016\003\320" +
    "\047\045\050\044\053\317\054\321\055\037\001\002\000" +
    "\012\003\uff6d\041\uff6d\042\uff6d\044\uff6d\001\002\000\006" +
    "\003\303\052\304\001\002\000\012\003\uff65\041\uff65\042" +
    "\uff65\044\uff65\001\002\000\006\003\307\043\306\001\002" +
    "\000\012\003\uff70\041\uff70\042\uff70\044\uff70\001\002\000" +
    "\012\003\uff64\041\uff64\042\uff64\044\uff64\001\002\000\012" +
    "\003\uff63\041\uff63\042\uff63\044\uff63\001\002\000\012\003" +
    "\uff66\041\uff66\042\uff66\044\uff66\001\002\000\012\003\uff6e" +
    "\041\uff6e\042\uff6e\044\uff6e\001\002\000\012\003\301\041" +
    "\302\042\300\044\051\001\002\000\012\003\301\041\302" +
    "\042\300\044\051\001\002\000\012\003\301\041\302\042" +
    "\300\044\051\001\002\000\012\003\301\041\302\042\300" +
    "\044\051\001\002\000\012\003\301\041\302\042\300\044" +
    "\051\001\002\000\006\003\352\043\351\001\002\000\012" +
    "\003\uff67\041\uff67\042\uff67\044\uff67\001\002\000\006\003" +
    "\323\043\322\001\002\000\012\003\326\041\330\042\325" +
    "\044\051\001\002\000\012\003\uff61\041\uff61\042\uff61\044" +
    "\uff61\001\002\000\012\003\uff89\041\uff89\042\uff89\044\uff89" +
    "\001\002\000\012\003\343\047\045\050\044\055\037\001" +
    "\002\000\012\003\uff5d\041\uff5d\042\uff5d\044\uff5d\001\002" +
    "\000\012\003\326\041\330\042\325\044\051\001\002\000" +
    "\006\003\333\054\332\001\002\000\012\003\uff62\041\uff62" +
    "\042\uff62\044\uff62\001\002\000\006\003\337\043\335\001" +
    "\002\000\012\003\uff57\041\uff57\042\uff57\044\uff57\001\002" +
    "\000\012\003\uff60\041\uff60\042\uff60\044\uff60\001\002\000" +
    "\012\003\uff56\041\uff56\042\uff56\044\uff56\001\002\000\012" +
    "\003\uff58\041\uff58\042\uff58\044\uff58\001\002\000\012\003" +
    "\uff55\041\uff55\042\uff55\044\uff55\001\002\000\012\003\uff5f" +
    "\041\uff5f\042\uff5f\044\uff5f\001\002\000\012\003\326\041" +
    "\330\042\325\044\051\001\002\000\012\003\uff5e\041\uff5e" +
    "\042\uff5e\044\uff5e\001\002\000\012\003\uff59\041\uff59\042" +
    "\uff59\044\uff59\001\002\000\012\003\326\041\330\042\325" +
    "\044\051\001\002\000\012\003\326\041\330\042\325\044" +
    "\051\001\002\000\012\003\uff5b\041\uff5b\042\uff5b\044\uff5b" +
    "\001\002\000\012\003\uff5a\041\uff5a\042\uff5a\044\uff5a\001" +
    "\002\000\012\003\uff5c\041\uff5c\042\uff5c\044\uff5c\001\002" +
    "\000\012\003\357\041\360\042\356\044\051\001\002\000" +
    "\012\003\uff53\041\uff53\042\uff53\044\uff53\001\002\000\012" +
    "\003\uff8a\041\uff8a\042\uff8a\044\uff8a\001\002\000\012\003" +
    "\uff54\041\uff54\042\uff54\044\uff54\001\002\000\012\003\357" +
    "\041\360\042\356\044\051\001\002\000\012\003\370\047" +
    "\045\050\044\055\037\001\002\000\012\003\uff4f\041\uff4f" +
    "\042\uff4f\044\uff4f\001\002\000\006\003\362\053\363\001" +
    "\002\000\012\003\uff52\041\uff52\042\uff52\044\uff52\001\002" +
    "\000\012\003\uff49\041\uff49\042\uff49\044\uff49\001\002\000" +
    "\006\003\366\043\365\001\002\000\012\003\uff4a\041\uff4a" +
    "\042\uff4a\044\uff4a\001\002\000\012\003\uff48\041\uff48\042" +
    "\uff48\044\uff48\001\002\000\012\003\uff47\041\uff47\042\uff47" +
    "\044\uff47\001\002\000\012\003\357\041\360\042\356\044" +
    "\051\001\002\000\012\003\uff4b\041\uff4b\042\uff4b\044\uff4b" +
    "\001\002\000\012\003\357\041\360\042\356\044\051\001" +
    "\002\000\012\003\uff50\041\uff50\042\uff50\044\uff50\001\002" +
    "\000\012\003\357\041\360\042\356\044\051\001\002\000" +
    "\012\003\uff4d\041\uff4d\042\uff4d\044\uff4d\001\002\000\012" +
    "\003\uff4c\041\uff4c\042\uff4c\044\uff4c\001\002\000\012\003" +
    "\uff4e\041\uff4e\042\uff4e\044\uff4e\001\002\000\012\003\uff51" +
    "\041\uff51\042\uff51\044\uff51\001\002\000\012\003\uff6c\041" +
    "\uff6c\042\uff6c\044\uff6c\001\002\000\012\003\uff6b\041\uff6b" +
    "\042\uff6b\044\uff6b\001\002\000\012\003\uff69\041\uff69\042" +
    "\uff69\044\uff69\001\002\000\012\003\uff6a\041\uff6a\042\uff6a" +
    "\044\uff6a\001\002\000\012\003\uff68\041\uff68\042\uff68\044" +
    "\uff68\001\002\000\012\003\uff6f\041\uff6f\042\uff6f\044\uff6f" +
    "\001\002\000\010\003\uff43\041\uff43\042\uff43\001\002\000" +
    "\004\002\uff94\001\002\000\012\003\uff86\041\uff86\042\uff86" +
    "\044\uff86\001\002\000\012\003\uff85\041\uff85\042\uff85\044" +
    "\uff85\001\002\000\012\003\uff8d\041\uff8d\042\uff8d\044\uff8d" +
    "\001\002\000\004\002\uff93\001\002\000\004\002\uff92\001" +
    "\002\000\004\002\uff91\001\002\000\006\003\u0110\021\u010f" +
    "\001\002\000\012\003\ufff7\024\ufff7\025\ufff7\027\ufff7\001" +
    "\002\000\014\003\ufff5\016\ufff5\021\ufff5\042\ufff5\057\ufff5" +
    "\001\002\000\014\003\ufffb\016\ufffb\021\ufffb\042\ufffb\057" +
    "\ufffb\001\002\000\012\003\u0115\024\u0114\025\u0116\027\u0113" +
    "\001\002\000\006\003\ufff3\021\ufff3\001\002\000\014\003" +
    "\u011d\004\071\022\u0118\023\u011a\031\u011f\001\002\000\014" +
    "\003\ufff0\016\ufff0\021\ufff0\042\ufff0\057\ufff0\001\002\000" +
    "\014\003\ufff1\016\ufff1\021\ufff1\042\ufff1\057\ufff1\001\002" +
    "\000\014\003\ufff6\016\ufff6\021\ufff6\042\ufff6\057\ufff6\001" +
    "\002\000\020\003\uffe3\025\uffe3\032\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\001\002\000\020\003\uffe4\025\uffe4\032" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002\000\020" +
    "\003\uffe2\025\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\001\002\000\016\003\u012a\025\u012c\035\u0121\036\u0123" +
    "\037\u0125\040\u0124\001\002\000\020\003\uffe1\025\uffe1\032" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002\000\014" +
    "\003\uffee\016\uffee\021\uffee\042\uffee\057\uffee\001\002\000" +
    "\014\003\ufff4\016\ufff4\021\ufff4\042\ufff4\057\ufff4\001\002" +
    "\000\012\004\071\022\u0118\023\u011a\031\u011f\001\002\000" +
    "\014\032\u0122\035\u0121\036\u0123\037\u0125\040\u0124\001\002" +
    "\000\012\004\071\022\u0118\023\u011a\031\u011f\001\002\000" +
    "\020\003\uffe5\025\uffe5\032\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\001\002\000\012\004\071\022\u0118\023\u011a\031" +
    "\u011f\001\002\000\012\004\071\022\u0118\023\u011a\031\u011f" +
    "\001\002\000\012\004\071\022\u0118\023\u011a\031\u011f\001" +
    "\002\000\020\003\uffe7\025\uffe7\032\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\001\002\000\020\003\uffe6\025\uffe6\032" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000\020" +
    "\003\uffe8\025\uffe8\032\uffe8\035\uffe8\036\uffe8\037\u0125\040" +
    "\u0124\001\002\000\020\003\uffe9\025\uffe9\032\uffe9\035\uffe9" +
    "\036\uffe9\037\u0125\040\u0124\001\002\000\014\003\uffec\016" +
    "\uffec\021\uffec\042\uffec\057\uffec\001\002\000\014\003\uffef" +
    "\016\uffef\021\uffef\042\uffef\057\uffef\001\002\000\014\003" +
    "\uffed\016\uffed\021\uffed\042\uffed\057\uffed\001\002\000\006" +
    "\003\u0110\021\u010f\001\002\000\014\003\ufff2\016\ufff2\021" +
    "\ufff2\042\ufff2\057\ufff2\001\002\000\006\003\u0110\021\u010f" +
    "\001\002\000\014\003\ufff9\016\ufff9\021\ufff9\042\ufff9\057" +
    "\ufff9\001\002\000\006\003\u0133\024\u0132\001\002\000\014" +
    "\003\u011d\004\071\022\u0118\023\u011a\031\u011f\001\002\000" +
    "\014\003\uffea\016\uffea\021\uffea\042\uffea\057\uffea\001\002" +
    "\000\014\003\010\016\007\021\005\042\011\057\006\001" +
    "\002\000\004\002\ufffd\001\002\000\014\003\uffeb\016\uffeb" +
    "\021\uffeb\042\uffeb\057\uffeb\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\006\002\011\003\003\001\001\000\006\002" +
    "\u0136\003\003\001\001\000\004\117\u0130\001\001\000\004" +
    "\121\u012e\001\001\000\004\120\u010d\001\001\000\002\001" +
    "\001\000\004\042\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\020\001\001\000\004\044\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\045\040\047" +
    "\037\050\035\051\034\052\033\001\001\000\002\001\001" +
    "\000\004\056\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\u010c\001\001\000" +
    "\004\044\u010b\001\001\000\004\044\u010a\001\001\000\004" +
    "\106\u0109\001\001\000\004\044\u0106\001\001\000\002\001" +
    "\001\000\004\107\243\001\001\000\002\001\001\000\004" +
    "\057\225\001\001\000\004\063\047\001\001\000\006\064" +
    "\053\114\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\067\115\065\001\001\000\006\064\063\114" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\217" +
    "\001\001\000\004\012\073\001\001\000\004\013\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\124\175\001\001\000\004\125" +
    "\151\001\001\000\004\127\127\001\001\000\002\001\001" +
    "\000\004\126\103\001\001\000\004\030\104\001\001\000" +
    "\002\001\001\000\004\031\107\001\001\000\004\135\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\134" +
    "\112\001\001\000\004\032\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\117\001\001\000\004\034" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\126\001\001\000\002\001\001\000\004" +
    "\035\130\001\001\000\002\001\001\000\004\036\134\001" +
    "\001\000\004\137\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\136\136\001\001\000\004\037\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\143" +
    "\001\001\000\004\041\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\150\001\001\000\002\001\001\000\004\023\152\001" +
    "\001\000\002\001\001\000\004\024\155\001\001\000\004" +
    "\133\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\132\160\001\001\000\004\025\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\165\001\001\000" +
    "\004\027\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\174\001\001\000\002\001\001" +
    "\000\004\016\176\001\001\000\002\001\001\000\004\017" +
    "\202\001\001\000\004\131\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\130\204\001\001\000\004\020" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\211\001\001\000\004\022\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\060\230\114\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\060\240\114\227" +
    "\001\001\000\002\001\001\000\004\061\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\110\244\114\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\110" +
    "\u0105\114\245\001\001\000\014\047\264\050\262\051\261" +
    "\053\263\113\257\001\001\000\002\001\001\000\004\111" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\112\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\272\001\001" +
    "\000\006\110\271\114\245\001\001\000\006\110\270\114" +
    "\245\001\001\000\006\110\267\114\245\001\001\000\006" +
    "\110\266\114\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\102\275\114\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\102\u0104\114\276" +
    "\001\001\000\016\047\315\050\314\051\312\054\313\055" +
    "\311\105\310\001\001\000\002\001\001\000\004\103\304" +
    "\001\001\000\002\001\001\000\004\104\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\102\u0103\114\276\001" +
    "\001\000\006\102\u0102\114\276\001\001\000\006\102\u0101" +
    "\114\276\001\001\000\006\102\u0100\114\276\001\001\000" +
    "\006\102\377\114\276\001\001\000\004\074\352\001\001" +
    "\000\002\001\001\000\004\067\323\001\001\000\006\070" +
    "\330\114\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\047\340\050\344\051\343\073\341\001\001\000" +
    "\002\001\001\000\006\070\337\114\326\001\001\000\004" +
    "\071\333\001\001\000\002\001\001\000\004\072\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\070\347\114\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\070\346\114\326\001\001\000\006\070" +
    "\345\114\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\075\353\114\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\075\376\114\354\001\001\000\012\047\366\050\372\051" +
    "\370\100\371\001\001\000\002\001\001\000\004\076\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\075\375\114\354\001\001\000\002\001" +
    "\001\000\006\075\374\114\354\001\001\000\002\001\001" +
    "\000\006\075\373\114\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u0110\001\001\000\004\122\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0116" +
    "\001\001\000\004\123\u012c\001\001\000\012\006\u011d\011" +
    "\u011b\014\u011a\015\u0118\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\u011b\014\u011f\015\u0118\001\001\000\002\001\001\000\010" +
    "\011\u011b\014\u0128\015\u0118\001\001\000\002\001\001\000" +
    "\010\011\u011b\014\u0127\015\u0118\001\001\000\010\011\u011b" +
    "\014\u0126\015\u0118\001\001\000\010\011\u011b\014\u0125\015" +
    "\u0118\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u012d\001\001\000\002" +
    "\001\001\000\004\004\u012f\001\001\000\002\001\001\000" +
    "\004\010\u0133\001\001\000\012\006\u0135\011\u011b\014\u011a" +
    "\015\u0118\001\001\000\002\001\001\000\006\002\u0134\003" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    private boolean errores = false;
    private TablaSimbolosJson tablaSimbolosJson;
    private TablaSimbolosDef tablaSimbolosDef;
    private javax.swing.JTextArea taErrores;
    private TerminoDef termino;
    private StringBuilder codigoHtml;
    private String tipo;
    private int indice;
    private RolJson rolJson;
    private boolean agregar = true;

    public parser(java_cup.runtime.Scanner s, TablaSimbolosJson tablaSimbolosJson, javax.swing.JTextArea taErrores){
        this(s);
        this.tablaSimbolosJson = tablaSimbolosJson;
        this.taErrores = taErrores;
        this.tablaSimbolosDef = new TablaSimbolosDef();
        this.codigoHtml = new StringBuilder();
    }

    public StringBuilder getCodigoHtml(){
        return this.codigoHtml;
    }

    public boolean isErrores(){
        return errores;
    }

    public void imprimirTablaSimbolosoDef(){
        tablaSimbolosDef.imprimir();
    }

    public void syntax_error(Symbol s){
        errores = true;
        taErrores.append("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left + ". ");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        errores = true;
        taErrores.append("No se pudo recuperar el analizador. Linea:" + s.right + " Columna:" + s.left + "\n");
    }

    private void agregarErrorYaExiste(int numFila, String id){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". " + id + " ya existe.\n");
    }

    private void agregarErrorCasteo(int numFila){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". Tipos incompatibles.\n");
    }

    private void agregarErrorOperacionNoPermitida(int numFila){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". Operacion no permitida en un String.\n");
    }

    private void agregarErrorNoExisteVarJson(int numFila){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". No esta definido en el archivo JSON.\n");
    }

    private void agregarErrorNoExisteVarDef(int numFila, String lexema){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". La variable: " + lexema+" No existe.\n");
    }

    private void agregarErrorIndice(int numFila, String lexema){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". La variable: " + lexema+" No es de tipo Integer.\n");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s0 ::= v0 s0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= MENOR_QUE h0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
agregar=false; termino = tablaSimbolosDef.getTermino(var1); if(termino == null){agregarErrorNoExisteVarDef(var1right, var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s0 ::= ID NT$0 v5 s0 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              String RESULT =null;
agregar = true; termino = new TerminoDef("String"); tipo = "String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // v0 ::= STRING NT$1 v1 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v0",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              String RESULT =null;
agregar = true; termino = new TerminoDef("Integer"); tipo = "Integer";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // v0 ::= INTEGER NT$2 v1 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v0",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // v0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba el tipo de dato\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v0",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(termino == null){termino = new TerminoDef(tipo);} termino.setId(var1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // v1 ::= ID NT$3 v2 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // v1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un id\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // v2 ::= ASIGNACION v3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
boolean agregado = tablaSimbolosDef.agregarTermino(termino); if(!agregado){agregarErrorYaExiste(var1right, termino.getId());} termino = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // v2 ::= COMA NT$4 v1 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // v2 ::= P_COMA 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		boolean agregado = tablaSimbolosDef.agregarTermino(termino); if(!agregado){agregarErrorYaExiste(var1right, termino.getId());}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // v2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba =, coma o punto y coma\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // v3 ::= exp v4 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 try{String tipo = (var1 instanceof Entero)? "Integer":"String";  if(tipo.equals(termino.getTipo())){termino.setValor(var1.toString()); if(agregar){boolean agregado = tablaSimbolosDef.agregarTermino(termino); if(!agregado){agregarErrorYaExiste(var1right, termino.getId());}}}else{agregarErrorCasteo(var1right);}}catch(Exception ex){agregarErrorOperacionNoPermitida(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // v3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un valor\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // v4 ::= P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v4",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // v4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba punto y coma\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v4",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // v5 ::= ASIGNACION v3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v5",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // v5 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba =\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v5",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp MAS exp 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{if(var1 instanceof Entero && var2 instanceof Entero){RESULT= new Entero(((Entero)var1).getEntero() + ((Entero)var2).getEntero());}else{RESULT= new Cadena(var1.toString() + var2.toString());}}catch(Exception ex){agregarErrorCasteo(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT=new Entero(((Entero)var1).getEntero() - ((Entero)var2).getEntero());}catch(Exception ex){agregarErrorCasteo(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp POR exp 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT=new Entero(((Entero)var1).getEntero() * ((Entero)var2).getEntero());}catch(Exception ex){agregarErrorCasteo(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp DIVISION exp 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT=new Entero(((Entero)var1).getEntero() / ((Entero)var2).getEntero());}catch(Exception ex){agregarErrorCasteo(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= PARENTESIS_A exp PARENTESIS_C 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= valor 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor ::= CADENA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Cadena(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor ::= ENTERO 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Entero(Integer.valueOf(var1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= v6 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // v6 ::= RESULT v7 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v6",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // v7 ::= PUNTO v8 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v7",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // v7 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba punto\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v7",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // v8 ::= SCORE 
            {
              Object RESULT =null;
		RESULT=new Cadena(tablaSimbolosJson.getScore());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$5 ::= 
            {
              Object RESULT =null;
rolJson=RolJson.CLASE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // v8 ::= CLASES NT$5 c0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descClases = tablaSimbolosJson.getClases(); if(descClases==null){agregarErrorNoExisteVarJson(var2right);}else{RESULT=new Cadena(descClases);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$6 ::= 
            {
              Object RESULT =null;
rolJson=RolJson.VARIABLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // v8 ::= VARIABLES NT$6 a0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descVars = tablaSimbolosJson.getVariables(); if(descVars==null){agregarErrorNoExisteVarJson(var2right);}else{RESULT=new Cadena(descVars);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$7 ::= 
            {
              Object RESULT =null;
rolJson=RolJson.METODO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // v8 ::= METODOS NT$7 m0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descMets = tablaSimbolosJson.getMetodos(); if(descMets==null){agregarErrorNoExisteVarJson(var2right);}else{RESULT=new Cadena(descMets);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
rolJson=RolJson.COMENTARIO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // v8 ::= COMENTARIOS NT$8 o0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descComs = tablaSimbolosJson.getComentarios(); if(descComs==null){agregarErrorNoExisteVarJson(var2right);}else{RESULT=new Cadena(descComs);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // v8 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba SCORE, CLASES, VARIABLES, METODOS o COMENTARIOS\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c0 ::= CORCHETE_A c1 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c0 ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$9 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
indice = Integer.valueOf(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c1 ::= ENTERO NT$9 c2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descClas = tablaSimbolosJson.getClase(Integer.valueOf(var1)); if(descClas==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descClas);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
try{TerminoDef td = tablaSimbolosDef.getTermino(var1); if(td!=null){indice=Integer.valueOf(td.getValor());}else{agregarErrorNoExisteVarDef(var1right, var1);}}catch(Exception ex){agregarErrorIndice(var1right,var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c1 ::= ID NT$10 c2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descClas = tablaSimbolosJson.getClase(indice); if(descClas==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descClas);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // c1 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba el indice\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // c2 ::= CORCHETE_C c3 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // c2 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba corchete de cierre\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c3 ::= PUNTO c4 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // c3 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // c4 ::= NOMBRE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getNombre());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c4",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // c4 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba la palabra reservada NOMBRE\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c4",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // a0 ::= CORCHETE_A a1 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // a0 ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$11 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
indice = Integer.valueOf(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // a1 ::= ENTERO NT$11 a2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descVar = tablaSimbolosJson.getVariable(Integer.valueOf(var1)); if(descVar==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descVar);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$12 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
try{TerminoDef td = tablaSimbolosDef.getTermino(var1); if(td!=null){indice=Integer.valueOf(td.getValor());}else{agregarErrorNoExisteVarDef(var1right, var1);}}catch(Exception ex){agregarErrorIndice(var1right,var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // a1 ::= ID NT$12 a2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descVar = tablaSimbolosJson.getVariable(indice); if(descVar==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descVar);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // a1 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba el indice\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // a2 ::= CORCHETE_C a3 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // a2 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba corchete de cierre\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // a3 ::= PUNTO a4 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // a3 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // a4 ::= NOMBRE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getNombre());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // a4 ::= TIPO 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getTipo());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // a4 ::= FUNCION 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getFuncion());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // a4 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba la palabra reservada NOMBRE, TIPO o FUNCION\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // m0 ::= CORCHETE_A m1 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // m0 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$13 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
indice = Integer.valueOf(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // m1 ::= ENTERO NT$13 m2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descMet = tablaSimbolosJson.getMetodo(Integer.valueOf(var1)); if(descMet==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descMet);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
try{TerminoDef td = tablaSimbolosDef.getTermino(var1); if(td!=null){indice=Integer.valueOf(td.getValor());}else{agregarErrorNoExisteVarDef(var1right, var1);}}catch(Exception ex){agregarErrorIndice(var1right,var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // m1 ::= ID NT$14 m2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descMet = tablaSimbolosJson.getMetodo(indice); if(descMet==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descMet);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // m1 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba el indice\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // m2 ::= CORCHETE_C m3 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // m2 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba corchete de cierre\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // m3 ::= PUNTO m4 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // m3 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // m4 ::= NOMBRE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getNombre());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // m4 ::= TIPO 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getTipo());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // m4 ::= PARAMETROS 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Entero(termJ.getParametros());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // m4 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba la palabra reservada NOMBRE, TIPO o PARAMETROS\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // o0 ::= CORCHETE_A o1 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // o0 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$15 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
indice = Integer.valueOf(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // o1 ::= ENTERO NT$15 o2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descCom = tablaSimbolosJson.getComentario(Integer.valueOf(var1)); if(descCom==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descCom);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$16 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
try{TerminoDef td = tablaSimbolosDef.getTermino(var1); if(td!=null){indice=Integer.valueOf(td.getValor());}else{agregarErrorNoExisteVarDef(var1right, var1);}}catch(Exception ex){agregarErrorIndice(var1right,var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // o1 ::= ID NT$16 o2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descCom = tablaSimbolosJson.getComentario(indice); if(descCom==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descCom);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // o1 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba el indice\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // o2 ::= CORCHETE_C o3 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // o2 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba corchete de cierre\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // o3 ::= PUNTO o4 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // o3 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // o4 ::= TEXTO 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getNombre());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o4",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // o4 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba la palabra reservada TEXTO\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o4",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // h0 ::= HTML h1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		codigoHtml.append("<" + var1 + var2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // h0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada HTML\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // h1 ::= MAYOR_QUE h2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // h1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // h2 ::= MENOR_QUE h3 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // h2 ::= INICIO_ETIQUETA h13 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // h2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba < o </\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // h3 ::= h5 h2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // h3 ::= h6 h2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // h3 ::= h7 h2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // h3 ::= h8 h2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // h3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba h1,h2,br,table y for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // h5 ::= H1 ch0 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h5",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // h6 ::= H2 cs0 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h6",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // h7 ::= BR br0 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h7",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // h8 ::= TABLE tabl0 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 +" border=\"1\""+ var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h8",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // h10 ::= TR tr0 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h10",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // h11 ::= TH th0 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h11",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // h12 ::= TD td0 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h12",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // h13 ::= HTML h4 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h13",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // h13 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada html\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h13",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // br0 ::= MAYOR_QUE 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("br0",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // br0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("br0",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ch0 ::= MAYOR_QUE ch1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ch0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ch1 ::= INICIO_ETIQUETA ch2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ch1 ::= r0 ch1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ch1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </ o $$(\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ch2 ::= H1 ch3 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ch2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba h1\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ch3 ::= MAYOR_QUE 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ch3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cs0 ::= MAYOR_QUE cs1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cs0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cs1 ::= INICIO_ETIQUETA cs2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cs1 ::= r0 cs1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cs1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </ o $$(\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cs2 ::= H2 cs3 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cs2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba h2\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cs3 ::= MAYOR_QUE 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs3",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cs3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs3",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tr0 ::= MAYOR_QUE tr1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr0",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tr0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr0",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tr1 ::= INICIO_ETIQUETA tr2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr1",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tr1 ::= r0 tr1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr1",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tr1 ::= MENOR_QUE tr4 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr1",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tr1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la <, $$( o </\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr1",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tr4 ::= h5 tr1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tr4 ::= h6 tr1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tr4 ::= h7 tr1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tr4 ::= h11 tr1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tr4 ::= h12 tr1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tr4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada h1,h2,br,th o td\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tr2 ::= TR tr3 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr2",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tr2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba tr\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr2",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tr3 ::= MAYOR_QUE 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr3",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tr3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr3",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // td0 ::= MAYOR_QUE td1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td0",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // td0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td0",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // td1 ::= INICIO_ETIQUETA td2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // td1 ::= r0 td1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // td1 ::= MENOR_QUE td4 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // td1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </, $$( o <\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // td4 ::= h5 td1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td4",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // td4 ::= h6 td1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td4",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // td4 ::= h7 td1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td4",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // td4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada h1,h2,br\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td4",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // td2 ::= TD td3 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // td2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada td\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // td3 ::= MAYOR_QUE 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // td3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // th0 ::= MAYOR_QUE th1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th0",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // th0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th0",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // th1 ::= INICIO_ETIQUETA th2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // th1 ::= r0 th1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // th1 ::= MENOR_QUE th4 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // th1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </, $$( o <\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // th4 ::= h5 th1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // th4 ::= h6 th1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // th4 ::= h7 th1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // th4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada h1,h2 o br\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // th2 ::= TH th3 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // th2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada th\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // th3 ::= MAYOR_QUE 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // th3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // tabl0 ::= MAYOR_QUE tabl1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl0",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // tabl0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl0",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // tabl1 ::= INICIO_ETIQUETA tabl2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // tabl1 ::= r0 tabl1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // tabl1 ::= MENOR_QUE tabl4 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // tabl1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </, $$( o <\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // tabl4 ::= h5 tabl1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // tabl4 ::= h6 tabl1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // tabl4 ::= h7 tabl1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // tabl4 ::= h10 tabl1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // tabl4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada h1,h2,br,for o tr\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // tabl2 ::= TABLE tabl3 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1 + var2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // tabl2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada table\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tabl3 ::= MAYOR_QUE 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tabl3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // r0 ::= INICIO_ACCESO r1 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r0",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // r1 ::= v6 r2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=var1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r1",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // r1 ::= ID r2 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		termino = tablaSimbolosDef.getTermino(var1); if(termino == null){agregarErrorNoExisteVarDef(var1right, var1);}else{RESULT=termino.getValor();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r1",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // r1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un id o RESULT...\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r1",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // r2 ::= FIN_ACCESO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r2",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // r2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba )$$\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r2",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // h4 ::= MAYOR_QUE 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // h4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
