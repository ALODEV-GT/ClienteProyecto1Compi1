
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorDef.cup;

import java_cup.runtime.Symbol;
import analizadorDef.tablaSimbolos.TablaSimbolosDef;
import analizadorDef.tablaSimbolos.TerminoDef;
import analizadorDef.tablaSimbolos.RolDef;
import analizadorJson.tablaSimbolos.RolJson;
import analizadorJson.tablaSimbolos.TablaSimbolosJson;
import analizadorDef.tablaSimbolos.Entero;
import analizadorDef.tablaSimbolos.Cadena;
import analizadorJson.tablaSimbolos.TerminoJson;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\367\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\134\002\000\002\002\006\000\002\135\002" +
    "\000\002\003\005\000\002\136\002\000\002\003\005\000" +
    "\002\003\003\000\002\137\002\000\002\004\005\000\002" +
    "\004\003\000\002\005\004\000\002\140\002\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\006\004" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\004\000\002\010\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\011\004\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\141\002\000\002" +
    "\013\005\000\002\142\002\000\002\013\005\000\002\143" +
    "\002\000\002\013\005\000\002\144\002\000\002\013\005" +
    "\000\002\013\003\000\002\016\004\000\002\016\002\000" +
    "\002\145\002\000\002\017\005\000\002\146\002\000\002" +
    "\017\005\000\002\017\003\000\002\020\004\000\002\020" +
    "\003\000\002\021\004\000\002\021\002\000\002\022\003" +
    "\000\002\022\003\000\002\023\004\000\002\023\002\000" +
    "\002\147\002\000\002\024\005\000\002\150\002\000\002" +
    "\024\005\000\002\024\003\000\002\025\004\000\002\025" +
    "\003\000\002\026\004\000\002\026\002\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\004\000\002\030\002\000\002\151\002\000\002" +
    "\031\005\000\002\152\002\000\002\031\005\000\002\031" +
    "\003\000\002\032\004\000\002\032\003\000\002\033\004" +
    "\000\002\033\002\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\004\000\002" +
    "\035\002\000\002\153\002\000\002\036\005\000\002\154" +
    "\002\000\002\036\005\000\002\036\003\000\002\037\004" +
    "\000\002\037\003\000\002\040\004\000\002\040\002\000" +
    "\002\041\003\000\002\041\003\000\002\042\004\000\002" +
    "\042\003\000\002\043\004\000\002\043\003\000\002\044" +
    "\004\000\002\044\004\000\002\044\003\000\002\045\004" +
    "\000\002\045\004\000\002\045\004\000\002\045\004\000" +
    "\002\045\004\000\002\045\003\000\002\047\004\000\002" +
    "\050\004\000\002\051\004\000\002\052\004\000\002\053" +
    "\004\000\002\054\004\000\002\055\004\000\002\056\004" +
    "\000\002\057\004\000\002\057\003\000\002\123\003\000" +
    "\002\123\003\000\002\100\004\000\002\100\003\000\002" +
    "\101\004\000\002\101\004\000\002\101\003\000\002\102" +
    "\004\000\002\102\003\000\002\103\003\000\002\103\003" +
    "\000\002\060\004\000\002\060\003\000\002\061\004\000" +
    "\002\061\004\000\002\061\003\000\002\062\004\000\002" +
    "\062\003\000\002\063\003\000\002\063\003\000\002\116" +
    "\004\000\002\116\003\000\002\117\004\000\002\117\004" +
    "\000\002\117\004\000\002\117\003\000\002\122\004\000" +
    "\002\122\004\000\002\122\004\000\002\122\004\000\002" +
    "\122\004\000\002\122\003\000\002\120\004\000\002\120" +
    "\003\000\002\121\003\000\002\121\003\000\002\104\004" +
    "\000\002\104\003\000\002\105\004\000\002\105\004\000" +
    "\002\105\004\000\002\105\003\000\002\110\004\000\002" +
    "\110\004\000\002\110\004\000\002\110\003\000\002\106" +
    "\004\000\002\106\003\000\002\107\003\000\002\107\003" +
    "\000\002\111\004\000\002\111\003\000\002\112\004\000" +
    "\002\112\004\000\002\112\004\000\002\112\003\000\002" +
    "\115\004\000\002\115\004\000\002\115\004\000\002\115" +
    "\003\000\002\113\004\000\002\113\003\000\002\114\003" +
    "\000\002\114\003\000\002\124\004\000\002\124\003\000" +
    "\002\125\004\000\002\125\004\000\002\125\004\000\002" +
    "\125\003\000\002\130\004\000\002\130\004\000\002\130" +
    "\004\000\002\130\004\000\002\130\004\000\002\130\003" +
    "\000\002\126\004\000\002\126\003\000\002\127\003\000" +
    "\002\127\003\000\002\064\004\000\002\064\003\000\002" +
    "\065\004\000\002\065\003\000\002\066\004\000\002\066" +
    "\004\000\002\066\003\000\002\067\004\000\002\067\003" +
    "\000\002\070\004\000\002\070\003\000\002\071\004\000" +
    "\002\071\004\000\002\071\003\000\002\072\004\000\002" +
    "\072\003\000\002\073\004\000\002\073\003\000\002\074" +
    "\004\000\002\074\004\000\002\074\004\000\002\074\003" +
    "\000\002\077\004\000\002\077\004\000\002\077\004\000" +
    "\002\077\004\000\002\077\004\000\002\077\004\000\002" +
    "\077\004\000\002\077\003\000\002\075\004\000\002\075" +
    "\003\000\002\076\003\000\002\076\003\000\002\131\004" +
    "\000\002\132\004\000\002\132\004\000\002\132\003\000" +
    "\002\133\003\000\002\133\003\000\002\046\003\000\002" +
    "\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\014\003\010\016\007\022\005\043\011\060" +
    "\006\001\002\000\014\003\010\016\007\022\005\043\011" +
    "\060\006\001\002\000\006\003\ufffe\025\ufffe\001\002\000" +
    "\006\003\ufffa\022\ufffa\001\002\000\006\003\ufffc\022\ufffc" +
    "\001\002\000\014\003\ufff8\016\ufff8\022\ufff8\043\ufff8\060" +
    "\ufff8\001\002\000\006\003\014\047\016\001\002\000\004" +
    "\002\013\001\002\000\004\002\001\001\002\000\004\002" +
    "\uff9a\001\002\000\004\002\uffff\001\002\000\006\003\020" +
    "\044\017\001\002\000\010\003\022\042\025\043\023\001" +
    "\002\000\004\002\uff98\001\002\000\004\002\uff9b\001\002" +
    "\000\004\002\uff95\001\002\000\016\003\045\017\034\050" +
    "\047\051\046\052\044\056\041\001\002\000\004\002\uff99" +
    "\001\002\000\006\003\026\047\030\001\002\000\004\002" +
    "\uff85\001\002\000\004\002\uff96\001\002\000\006\003\033" +
    "\044\032\001\002\000\004\002\uff86\001\002\000\004\002" +
    "\uff0c\001\002\000\004\002\uff0b\001\002\000\006\003\u0114" +
    "\020\u0115\001\002\000\010\003\022\042\025\043\023\001" +
    "\002\000\010\003\022\042\025\043\023\001\002\000\010" +
    "\003\022\042\025\043\023\001\002\000\010\003\022\042" +
    "\025\043\023\001\002\000\006\003\u010d\044\u010c\001\002" +
    "\000\010\003\022\042\025\043\023\001\002\000\004\002" +
    "\uff97\001\002\000\006\003\245\044\244\001\002\000\004" +
    "\002\uff8f\001\002\000\006\003\227\044\226\001\002\000" +
    "\006\003\051\044\050\001\002\000\010\003\054\042\057" +
    "\045\055\001\002\000\012\003\uff81\042\uff81\043\uff81\045" +
    "\uff81\001\002\000\012\003\uff8e\042\uff8e\043\uff8e\045\uff8e" +
    "\001\002\000\010\003\054\042\057\045\055\001\002\000" +
    "\012\003\uff7e\042\uff7e\043\uff7e\045\uff7e\001\002\000\010" +
    "\003\070\004\072\022\066\001\002\000\012\003\uff82\042" +
    "\uff82\043\uff82\045\uff82\001\002\000\006\003\061\050\062" +
    "\001\002\000\012\003\uff80\042\uff80\043\uff80\045\uff80\001" +
    "\002\000\012\003\uff7c\042\uff7c\043\uff7c\045\uff7c\001\002" +
    "\000\006\003\065\044\064\001\002\000\012\003\uff7d\042" +
    "\uff7d\043\uff7d\045\uff7d\001\002\000\012\003\uff7b\042\uff7b" +
    "\043\uff7b\045\uff7b\001\002\000\012\003\uff7a\042\uff7a\043" +
    "\uff7a\045\uff7a\001\002\000\006\003\222\046\223\001\002" +
    "\000\012\003\uff12\042\uff12\043\uff12\045\uff12\001\002\000" +
    "\012\003\uff0f\042\uff0f\043\uff0f\045\uff0f\001\002\000\006" +
    "\003\222\046\223\001\002\000\006\003\074\027\073\001" +
    "\002\000\016\003\076\005\103\006\100\007\101\013\104" +
    "\015\102\001\002\000\022\003\uffde\026\uffde\033\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\046\uffde\001\002\000\022" +
    "\003\uffe0\026\uffe0\033\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\046\uffe0\001\002\000\022\003\uffd4\026\uffd4\033\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\046\uffd4\001\002\000" +
    "\022\003\uffdf\026\uffdf\033\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\046\uffdf\001\002\000\024\003\uffdc\026\uffdc\033" +
    "\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\046\uffdc" +
    "\001\002\000\024\003\uffda\026\uffda\033\uffda\034\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\046\uffda\001\002\000\024" +
    "\003\uffd6\026\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\046\uffd6\001\002\000\022\003\uffdd\026\uffdd" +
    "\033\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\046\uffdd\001" +
    "\002\000\024\003\uffd8\026\uffd8\033\uffd8\034\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\046\uffd8\001\002\000\024\003" +
    "\uffb6\026\uffb6\033\uffb6\034\107\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\046\uffb6\001\002\000\022\003\uffd7\026\uffd7\033" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\046\uffd7\001\002" +
    "\000\010\003\112\022\110\024\113\001\002\000\006\003" +
    "\uffb3\035\uffb3\001\002\000\022\003\uffb7\026\uffb7\033\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\046\uffb7\001\002\000" +
    "\022\003\uffb1\026\uffb1\033\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\046\uffb1\001\002\000\006\003\uffb5\035\uffb5\001" +
    "\002\000\006\003\116\035\117\001\002\000\022\003\uffb4" +
    "\026\uffb4\033\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\046" +
    "\uffb4\001\002\000\022\003\uffaf\026\uffaf\033\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\046\uffaf\001\002\000\024\003" +
    "\uffad\026\uffad\027\120\033\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\046\uffad\001\002\000\012\003\123\010\125\011" +
    "\126\014\124\001\002\000\022\003\uffb0\026\uffb0\033\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\046\uffb0\001\002\000" +
    "\022\003\uffae\026\uffae\033\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\046\uffae\001\002\000\022\003\uffa9\026\uffa9\033" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\046\uffa9\001\002" +
    "\000\022\003\uffaa\026\uffaa\033\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\046\uffaa\001\002\000\022\003\uffac\026\uffac" +
    "\033\uffac\036\uffac\037\uffac\040\uffac\041\uffac\046\uffac\001" +
    "\002\000\022\003\uffab\026\uffab\033\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\046\uffab\001\002\000\006\003\116\035" +
    "\117\001\002\000\022\003\uffb2\026\uffb2\033\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\046\uffb2\001\002\000\024\003" +
    "\uffa7\026\uffa7\033\uffa7\034\133\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\046\uffa7\001\002\000\022\003\uffd5\026\uffd5\033" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\046\uffd5\001\002" +
    "\000\010\003\135\022\134\024\137\001\002\000\006\003" +
    "\uffa4\035\uffa4\001\002\000\022\003\uffa2\026\uffa2\033\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\046\uffa2\001\002\000" +
    "\022\003\uffa8\026\uffa8\033\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\046\uffa8\001\002\000\006\003\uffa6\035\uffa6\001" +
    "\002\000\006\003\141\035\143\001\002\000\022\003\uffa0" +
    "\026\uffa0\033\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\046" +
    "\uffa0\001\002\000\022\003\uffa5\026\uffa5\033\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\046\uffa5\001\002\000\024\003" +
    "\uff9e\026\uff9e\027\144\033\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\046\uff9e\001\002\000\006\003\147\057\146\001" +
    "\002\000\022\003\uffa1\026\uffa1\033\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\046\uffa1\001\002\000\022\003\uff9d\026" +
    "\uff9d\033\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\046\uff9d" +
    "\001\002\000\022\003\uff9c\026\uff9c\033\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\046\uff9c\001\002\000\022\003\uff9f" +
    "\026\uff9f\033\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\046" +
    "\uff9f\001\002\000\006\003\141\035\143\001\002\000\022" +
    "\003\uffa3\026\uffa3\033\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\046\uffa3\001\002\000\024\003\uffc5\026\uffc5\033\uffc5" +
    "\034\155\036\uffc5\037\uffc5\040\uffc5\041\uffc5\046\uffc5\001" +
    "\002\000\022\003\uffd9\026\uffd9\033\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\046\uffd9\001\002\000\010\003\160\022" +
    "\156\024\161\001\002\000\006\003\uffc2\035\uffc2\001\002" +
    "\000\022\003\uffc6\026\uffc6\033\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\046\uffc6\001\002\000\022\003\uffc0\026\uffc0" +
    "\033\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\046\uffc0\001" +
    "\002\000\006\003\uffc4\035\uffc4\001\002\000\006\003\164" +
    "\035\165\001\002\000\022\003\uffc3\026\uffc3\033\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\046\uffc3\001\002\000\022" +
    "\003\uffbe\026\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\046\uffbe\001\002\000\024\003\uffbc\026\uffbc\027\166" +
    "\033\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\046\uffbc\001" +
    "\002\000\012\003\170\010\172\011\174\012\171\001\002" +
    "\000\022\003\uffbf\026\uffbf\033\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\046\uffbf\001\002\000\022\003\uffb8\026\uffb8" +
    "\033\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\046\uffb8\001" +
    "\002\000\022\003\uffb9\026\uffb9\033\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\046\uffb9\001\002\000\022\003\uffbb\026" +
    "\uffbb\033\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\046\uffbb" +
    "\001\002\000\022\003\uffbd\026\uffbd\033\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\046\uffbd\001\002\000\022\003\uffba" +
    "\026\uffba\033\uffba\036\uffba\037\uffba\040\uffba\041\uffba\046" +
    "\uffba\001\002\000\006\003\164\035\165\001\002\000\022" +
    "\003\uffc1\026\uffc1\033\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\046\uffc1\001\002\000\024\003\uffd2\026\uffd2\033\uffd2" +
    "\034\201\036\uffd2\037\uffd2\040\uffd2\041\uffd2\046\uffd2\001" +
    "\002\000\022\003\uffdb\026\uffdb\033\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\046\uffdb\001\002\000\010\003\203\022" +
    "\202\024\205\001\002\000\006\003\uffcf\035\uffcf\001\002" +
    "\000\022\003\uffcd\026\uffcd\033\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\046\uffcd\001\002\000\022\003\uffd3\026\uffd3" +
    "\033\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\046\uffd3\001" +
    "\002\000\006\003\uffd1\035\uffd1\001\002\000\006\003\207" +
    "\035\211\001\002\000\022\003\uffcb\026\uffcb\033\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\046\uffcb\001\002\000\022" +
    "\003\uffd0\026\uffd0\033\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\046\uffd0\001\002\000\024\003\uffc9\026\uffc9\027\212" +
    "\033\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\046\uffc9\001" +
    "\002\000\006\003\215\010\216\001\002\000\022\003\uffcc" +
    "\026\uffcc\033\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\046" +
    "\uffcc\001\002\000\022\003\uffca\026\uffca\033\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\046\uffca\001\002\000\022\003" +
    "\uffc7\026\uffc7\033\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\046\uffc7\001\002\000\022\003\uffc8\026\uffc8\033\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\046\uffc8\001\002\000\006" +
    "\003\207\035\211\001\002\000\022\003\uffce\026\uffce\033" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\046\uffce\001\002" +
    "\000\012\003\uff11\042\uff11\043\uff11\045\uff11\001\002\000" +
    "\012\003\uff0d\042\uff0d\043\uff0d\045\uff0d\001\002\000\012" +
    "\003\uff0e\042\uff0e\043\uff0e\045\uff0e\001\002\000\012\003" +
    "\uff10\042\uff10\043\uff10\045\uff10\001\002\000\012\003\uff7f" +
    "\042\uff7f\043\uff7f\045\uff7f\001\002\000\010\003\232\042" +
    "\234\045\055\001\002\000\012\003\uff78\042\uff78\043\uff78" +
    "\045\uff78\001\002\000\012\003\uff8d\042\uff8d\043\uff8d\045" +
    "\uff8d\001\002\000\010\003\232\042\234\045\055\001\002" +
    "\000\012\003\uff75\042\uff75\043\uff75\045\uff75\001\002\000" +
    "\012\003\uff79\042\uff79\043\uff79\045\uff79\001\002\000\006" +
    "\003\236\051\237\001\002\000\012\003\uff77\042\uff77\043" +
    "\uff77\045\uff77\001\002\000\012\003\uff73\042\uff73\043\uff73" +
    "\045\uff73\001\002\000\006\003\242\044\240\001\002\000" +
    "\012\003\uff72\042\uff72\043\uff72\045\uff72\001\002\000\012" +
    "\003\uff74\042\uff74\043\uff74\045\uff74\001\002\000\012\003" +
    "\uff71\042\uff71\043\uff71\045\uff71\001\002\000\012\003\uff76" +
    "\042\uff76\043\uff76\045\uff76\001\002\000\012\003\250\042" +
    "\253\043\247\045\055\001\002\000\012\003\uff43\042\uff43" +
    "\043\uff43\045\uff43\001\002\000\012\003\uff8b\042\uff8b\043" +
    "\uff8b\045\uff8b\001\002\000\016\003\272\017\034\050\047" +
    "\051\046\053\264\056\041\001\002\000\012\003\uff3f\042" +
    "\uff3f\043\uff3f\045\uff3f\001\002\000\012\003\uff44\042\uff44" +
    "\043\uff44\045\uff44\001\002\000\012\003\250\042\253\043" +
    "\247\045\055\001\002\000\006\003\255\052\256\001\002" +
    "\000\012\003\uff42\042\uff42\043\uff42\045\uff42\001\002\000" +
    "\012\003\uff37\042\uff37\043\uff37\045\uff37\001\002\000\006" +
    "\003\261\044\260\001\002\000\012\003\uff38\042\uff38\043" +
    "\uff38\045\uff38\001\002\000\012\003\uff36\042\uff36\043\uff36" +
    "\045\uff36\001\002\000\012\003\uff35\042\uff35\043\uff35\045" +
    "\uff35\001\002\000\012\003\uff41\042\uff41\043\uff41\045\uff41" +
    "\001\002\000\012\003\uff40\042\uff40\043\uff40\045\uff40\001" +
    "\002\000\006\003\302\044\301\001\002\000\012\003\250" +
    "\042\253\043\247\045\055\001\002\000\012\003\250\042" +
    "\253\043\247\045\055\001\002\000\012\003\250\042\253" +
    "\043\247\045\055\001\002\000\012\003\250\042\253\043" +
    "\247\045\055\001\002\000\012\003\250\042\253\043\247" +
    "\045\055\001\002\000\012\003\uff39\042\uff39\043\uff39\045" +
    "\uff39\001\002\000\012\003\uff3e\042\uff3e\043\uff3e\045\uff3e" +
    "\001\002\000\012\003\uff3a\042\uff3a\043\uff3a\045\uff3a\001" +
    "\002\000\012\003\uff3d\042\uff3d\043\uff3d\045\uff3d\001\002" +
    "\000\012\003\uff3c\042\uff3c\043\uff3c\045\uff3c\001\002\000" +
    "\012\003\uff3b\042\uff3b\043\uff3b\045\uff3b\001\002\000\012" +
    "\003\uff89\042\uff89\043\uff89\045\uff89\001\002\000\012\003" +
    "\305\042\307\043\304\045\055\001\002\000\012\003\uff6f" +
    "\042\uff6f\043\uff6f\045\uff6f\001\002\000\012\003\uff70\042" +
    "\uff70\043\uff70\045\uff70\001\002\000\016\003\326\050\047" +
    "\051\046\054\325\055\327\056\041\001\002\000\012\003" +
    "\uff6b\042\uff6b\043\uff6b\045\uff6b\001\002\000\012\003\305" +
    "\042\307\043\304\045\055\001\002\000\006\003\310\053" +
    "\311\001\002\000\012\003\uff63\042\uff63\043\uff63\045\uff63" +
    "\001\002\000\006\003\314\044\313\001\002\000\012\003" +
    "\uff6e\042\uff6e\043\uff6e\045\uff6e\001\002\000\012\003\uff62" +
    "\042\uff62\043\uff62\045\uff62\001\002\000\012\003\uff61\042" +
    "\uff61\043\uff61\045\uff61\001\002\000\012\003\uff64\042\uff64" +
    "\043\uff64\045\uff64\001\002\000\012\003\uff6d\042\uff6d\043" +
    "\uff6d\045\uff6d\001\002\000\012\003\uff6c\042\uff6c\043\uff6c" +
    "\045\uff6c\001\002\000\012\003\305\042\307\043\304\045" +
    "\055\001\002\000\012\003\305\042\307\043\304\045\055" +
    "\001\002\000\012\003\305\042\307\043\304\045\055\001" +
    "\002\000\012\003\305\042\307\043\304\045\055\001\002" +
    "\000\012\003\305\042\307\043\304\045\055\001\002\000" +
    "\006\003\360\044\357\001\002\000\012\003\uff65\042\uff65" +
    "\043\uff65\045\uff65\001\002\000\006\003\331\044\330\001" +
    "\002\000\012\003\334\042\336\043\333\045\055\001\002" +
    "\000\012\003\uff5f\042\uff5f\043\uff5f\045\uff5f\001\002\000" +
    "\012\003\uff87\042\uff87\043\uff87\045\uff87\001\002\000\012" +
    "\003\351\050\047\051\046\056\041\001\002\000\012\003" +
    "\uff5b\042\uff5b\043\uff5b\045\uff5b\001\002\000\012\003\334" +
    "\042\336\043\333\045\055\001\002\000\006\003\341\055" +
    "\340\001\002\000\012\003\uff60\042\uff60\043\uff60\045\uff60" +
    "\001\002\000\006\003\345\044\343\001\002\000\012\003" +
    "\uff55\042\uff55\043\uff55\045\uff55\001\002\000\012\003\uff5e" +
    "\042\uff5e\043\uff5e\045\uff5e\001\002\000\012\003\uff54\042" +
    "\uff54\043\uff54\045\uff54\001\002\000\012\003\uff56\042\uff56" +
    "\043\uff56\045\uff56\001\002\000\012\003\uff53\042\uff53\043" +
    "\uff53\045\uff53\001\002\000\012\003\uff5d\042\uff5d\043\uff5d" +
    "\045\uff5d\001\002\000\012\003\334\042\336\043\333\045" +
    "\055\001\002\000\012\003\uff5c\042\uff5c\043\uff5c\045\uff5c" +
    "\001\002\000\012\003\uff57\042\uff57\043\uff57\045\uff57\001" +
    "\002\000\012\003\334\042\336\043\333\045\055\001\002" +
    "\000\012\003\334\042\336\043\333\045\055\001\002\000" +
    "\012\003\uff59\042\uff59\043\uff59\045\uff59\001\002\000\012" +
    "\003\uff58\042\uff58\043\uff58\045\uff58\001\002\000\012\003" +
    "\uff5a\042\uff5a\043\uff5a\045\uff5a\001\002\000\012\003\364" +
    "\042\366\043\363\045\055\001\002\000\012\003\uff51\042" +
    "\uff51\043\uff51\045\uff51\001\002\000\012\003\uff88\042\uff88" +
    "\043\uff88\045\uff88\001\002\000\012\003\uff52\042\uff52\043" +
    "\uff52\045\uff52\001\002\000\012\003\377\050\047\051\046" +
    "\056\041\001\002\000\012\003\uff4d\042\uff4d\043\uff4d\045" +
    "\uff4d\001\002\000\012\003\364\042\366\043\363\045\055" +
    "\001\002\000\006\003\370\054\371\001\002\000\012\003" +
    "\uff50\042\uff50\043\uff50\045\uff50\001\002\000\012\003\uff47" +
    "\042\uff47\043\uff47\045\uff47\001\002\000\006\003\374\044" +
    "\373\001\002\000\012\003\uff48\042\uff48\043\uff48\045\uff48" +
    "\001\002\000\012\003\uff46\042\uff46\043\uff46\045\uff46\001" +
    "\002\000\012\003\uff45\042\uff45\043\uff45\045\uff45\001\002" +
    "\000\012\003\uff4f\042\uff4f\043\uff4f\045\uff4f\001\002\000" +
    "\012\003\364\042\366\043\363\045\055\001\002\000\012" +
    "\003\uff49\042\uff49\043\uff49\045\uff49\001\002\000\012\003" +
    "\364\042\366\043\363\045\055\001\002\000\012\003\uff4e" +
    "\042\uff4e\043\uff4e\045\uff4e\001\002\000\012\003\364\042" +
    "\366\043\363\045\055\001\002\000\012\003\uff4b\042\uff4b" +
    "\043\uff4b\045\uff4b\001\002\000\012\003\uff4a\042\uff4a\043" +
    "\uff4a\045\uff4a\001\002\000\012\003\uff4c\042\uff4c\043\uff4c" +
    "\045\uff4c\001\002\000\012\003\uff6a\042\uff6a\043\uff6a\045" +
    "\uff6a\001\002\000\012\003\uff69\042\uff69\043\uff69\045\uff69" +
    "\001\002\000\012\003\uff67\042\uff67\043\uff67\045\uff67\001" +
    "\002\000\012\003\uff68\042\uff68\043\uff68\045\uff68\001\002" +
    "\000\012\003\uff66\042\uff66\043\uff66\045\uff66\001\002\000" +
    "\004\002\uff94\001\002\000\012\003\uff84\042\uff84\043\uff84" +
    "\045\uff84\001\002\000\012\003\uff83\042\uff83\043\uff83\045" +
    "\uff83\001\002\000\012\003\uff8c\042\uff8c\043\uff8c\045\uff8c" +
    "\001\002\000\004\002\uff93\001\002\000\004\002\uff92\001" +
    "\002\000\004\002\uff91\001\002\000\004\002\uff90\001\002" +
    "\000\012\003\uff8a\042\uff8a\043\uff8a\045\uff8a\001\002\000" +
    "\012\003\uff33\042\uff33\043\uff33\045\uff33\001\002\000\006" +
    "\003\u0117\031\u0118\001\002\000\012\003\uff34\042\uff34\043" +
    "\uff34\045\uff34\001\002\000\012\003\uff31\042\uff31\043\uff31" +
    "\045\uff31\001\002\000\010\003\u011a\022\u0119\024\u011b\001" +
    "\002\000\006\003\u011d\021\u011e\001\002\000\012\003\uff2e" +
    "\042\uff2e\043\uff2e\045\uff2e\001\002\000\006\003\u011d\021" +
    "\u011e\001\002\000\012\003\uff32\042\uff32\043\uff32\045\uff32" +
    "\001\002\000\012\003\uff2c\042\uff2c\043\uff2c\045\uff2c\001" +
    "\002\000\006\003\u0120\031\u0122\001\002\000\012\003\uff30" +
    "\042\uff30\043\uff30\045\uff30\001\002\000\012\003\uff2a\042" +
    "\uff2a\043\uff2a\045\uff2a\001\002\000\012\003\uff2d\042\uff2d" +
    "\043\uff2d\045\uff2d\001\002\000\010\003\u0124\022\u0123\024" +
    "\u0126\001\002\000\006\003\u0127\026\u0129\001\002\000\012" +
    "\003\uff27\042\uff27\043\uff27\045\uff27\001\002\000\012\003" +
    "\uff2b\042\uff2b\043\uff2b\045\uff2b\001\002\000\006\003\u0127" +
    "\026\u0129\001\002\000\012\003\uff25\042\uff25\043\uff25\045" +
    "\uff25\001\002\000\012\003\uff29\042\uff29\043\uff29\045\uff29" +
    "\001\002\000\006\003\u012b\044\u012a\001\002\000\012\003" +
    "\u012d\042\u0131\043\u012f\045\055\001\002\000\012\003\uff23" +
    "\042\uff23\043\uff23\045\uff23\001\002\000\012\003\uff26\042" +
    "\uff26\043\uff26\045\uff26\001\002\000\012\003\uff1f\042\uff1f" +
    "\043\uff1f\045\uff1f\001\002\000\012\003\u012d\042\u0131\043" +
    "\u012f\045\055\001\002\000\022\003\u013f\050\047\051\046" +
    "\052\044\053\264\054\325\055\327\056\041\001\002\000" +
    "\012\003\uff24\042\uff24\043\uff24\045\uff24\001\002\000\006" +
    "\003\u0133\017\u0134\001\002\000\012\003\uff22\042\uff22\043" +
    "\uff22\045\uff22\001\002\000\012\003\uff15\042\uff15\043\uff15" +
    "\045\uff15\001\002\000\006\003\u0136\044\u0135\001\002\000" +
    "\012\003\uff14\042\uff14\043\uff14\045\uff14\001\002\000\012" +
    "\003\uff13\042\uff13\043\uff13\045\uff13\001\002\000\012\003" +
    "\uff16\042\uff16\043\uff16\045\uff16\001\002\000\012\003\u012d" +
    "\042\u0131\043\u012f\045\055\001\002\000\012\003\u012d\042" +
    "\u0131\043\u012f\045\055\001\002\000\012\003\u012d\042\u0131" +
    "\043\u012f\045\055\001\002\000\012\003\u012d\042\u0131\043" +
    "\u012f\045\055\001\002\000\012\003\u012d\042\u0131\043\u012f" +
    "\045\055\001\002\000\012\003\u012d\042\u0131\043\u012f\045" +
    "\055\001\002\000\012\003\u012d\042\u0131\043\u012f\045\055" +
    "\001\002\000\012\003\uff17\042\uff17\043\uff17\045\uff17\001" +
    "\002\000\012\003\uff20\042\uff20\043\uff20\045\uff20\001\002" +
    "\000\012\003\uff1e\042\uff1e\043\uff1e\045\uff1e\001\002\000" +
    "\012\003\uff1a\042\uff1a\043\uff1a\045\uff1a\001\002\000\012" +
    "\003\uff1d\042\uff1d\043\uff1d\045\uff1d\001\002\000\012\003" +
    "\uff19\042\uff19\043\uff19\045\uff19\001\002\000\012\003\uff1c" +
    "\042\uff1c\043\uff1c\045\uff1c\001\002\000\012\003\uff18\042" +
    "\uff18\043\uff18\045\uff18\001\002\000\012\003\uff1b\042\uff1b" +
    "\043\uff1b\045\uff1b\001\002\000\012\003\uff21\042\uff21\043" +
    "\uff21\045\uff21\001\002\000\012\003\uff28\042\uff28\043\uff28" +
    "\045\uff28\001\002\000\012\003\uff2f\042\uff2f\043\uff2f\045" +
    "\uff2f\001\002\000\006\003\u014d\022\u014c\001\002\000\012" +
    "\003\ufff7\025\ufff7\026\ufff7\030\ufff7\001\002\000\014\003" +
    "\ufff5\016\ufff5\022\ufff5\043\ufff5\060\ufff5\001\002\000\014" +
    "\003\ufffb\016\ufffb\022\ufffb\043\ufffb\060\ufffb\001\002\000" +
    "\012\003\u0152\025\u0151\026\u0153\030\u0150\001\002\000\006" +
    "\003\ufff3\022\ufff3\001\002\000\014\003\u015a\004\072\023" +
    "\u0155\024\u0157\032\u015c\001\002\000\014\003\ufff0\016\ufff0" +
    "\022\ufff0\043\ufff0\060\ufff0\001\002\000\014\003\ufff1\016" +
    "\ufff1\022\ufff1\043\ufff1\060\ufff1\001\002\000\014\003\ufff6" +
    "\016\ufff6\022\ufff6\043\ufff6\060\ufff6\001\002\000\020\003" +
    "\uffe3\026\uffe3\033\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\001\002\000\020\003\uffe4\026\uffe4\033\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\001\002\000\020\003\uffe2\026\uffe2" +
    "\033\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002\000" +
    "\016\003\u0167\026\u0169\036\u015e\037\u0160\040\u0162\041\u0161" +
    "\001\002\000\020\003\uffe1\026\uffe1\033\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\001\002\000\014\003\uffee\016\uffee" +
    "\022\uffee\043\uffee\060\uffee\001\002\000\014\003\ufff4\016" +
    "\ufff4\022\ufff4\043\ufff4\060\ufff4\001\002\000\012\004\072" +
    "\023\u0155\024\u0157\032\u015c\001\002\000\014\033\u015f\036" +
    "\u015e\037\u0160\040\u0162\041\u0161\001\002\000\012\004\072" +
    "\023\u0155\024\u0157\032\u015c\001\002\000\020\003\uffe5\026" +
    "\uffe5\033\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002" +
    "\000\012\004\072\023\u0155\024\u0157\032\u015c\001\002\000" +
    "\012\004\072\023\u0155\024\u0157\032\u015c\001\002\000\012" +
    "\004\072\023\u0155\024\u0157\032\u015c\001\002\000\020\003" +
    "\uffe7\026\uffe7\033\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\001\002\000\020\003\uffe6\026\uffe6\033\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\001\002\000\020\003\uffe8\026\uffe8" +
    "\033\uffe8\036\uffe8\037\uffe8\040\u0162\041\u0161\001\002\000" +
    "\020\003\uffe9\026\uffe9\033\uffe9\036\uffe9\037\uffe9\040\u0162" +
    "\041\u0161\001\002\000\014\003\uffec\016\uffec\022\uffec\043" +
    "\uffec\060\uffec\001\002\000\014\003\uffef\016\uffef\022\uffef" +
    "\043\uffef\060\uffef\001\002\000\014\003\uffed\016\uffed\022" +
    "\uffed\043\uffed\060\uffed\001\002\000\006\003\u014d\022\u014c" +
    "\001\002\000\014\003\ufff2\016\ufff2\022\ufff2\043\ufff2\060" +
    "\ufff2\001\002\000\006\003\u014d\022\u014c\001\002\000\014" +
    "\003\ufff9\016\ufff9\022\ufff9\043\ufff9\060\ufff9\001\002\000" +
    "\006\003\u0170\025\u016f\001\002\000\014\003\u015a\004\072" +
    "\023\u0155\024\u0157\032\u015c\001\002\000\014\003\uffea\016" +
    "\uffea\022\uffea\043\uffea\060\uffea\001\002\000\014\003\010" +
    "\016\007\022\005\043\011\060\006\001\002\000\004\002" +
    "\ufffd\001\002\000\014\003\uffeb\016\uffeb\022\uffeb\043\uffeb" +
    "\060\uffeb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\006\002\011\003\003\001\001\000\006\002" +
    "\u0173\003\003\001\001\000\004\134\u016d\001\001\000\004" +
    "\136\u016b\001\001\000\004\135\u014a\001\001\000\002\001" +
    "\001\000\004\042\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\020\001\001\000\004\044\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\045\042\047" +
    "\041\050\037\051\036\052\035\053\034\001\001\000\002" +
    "\001\001\000\004\057\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\u0112\001" +
    "\001\000\004\044\u0111\001\001\000\004\044\u0110\001\001" +
    "\000\004\044\u010f\001\001\000\004\044\u010e\001\001\000" +
    "\004\123\u010d\001\001\000\004\044\u010a\001\001\000\002" +
    "\001\001\000\004\124\245\001\001\000\002\001\001\000" +
    "\004\060\227\001\001\000\004\100\051\001\001\000\006" +
    "\101\055\131\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\224\131\052\001\001\000\002\001\001" +
    "\000\006\011\070\132\066\001\001\000\002\001\001\000" +
    "\004\102\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\103\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\133\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\133\220\001\001\000" +
    "\004\012\074\001\001\000\004\013\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\141\176\001\001\000\004\142\152\001\001" +
    "\000\004\144\130\001\001\000\002\001\001\000\004\143" +
    "\104\001\001\000\004\030\105\001\001\000\002\001\001" +
    "\000\004\031\110\001\001\000\004\152\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\151\113\001\001" +
    "\000\004\032\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\120\001\001\000\004\034\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\127\001\001\000\002\001\001\000\004\035\131\001" +
    "\001\000\002\001\001\000\004\036\135\001\001\000\004" +
    "\154\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\153\137\001\001\000\004\037\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\144\001\001\000" +
    "\004\041\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\151\001" +
    "\001\000\002\001\001\000\004\023\153\001\001\000\002" +
    "\001\001\000\004\024\156\001\001\000\004\150\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\147\161" +
    "\001\001\000\004\025\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\166\001\001\000\004\027\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\175\001\001\000\002\001\001\000\004\016" +
    "\177\001\001\000\002\001\001\000\004\017\203\001\001" +
    "\000\004\146\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\145\205\001\001\000\004\020\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\212\001" +
    "\001\000\004\022\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\061\232\131\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\242\131\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\125\250\131\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\047\270\050\266" +
    "\051\265\053\264\054\267\130\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\125\261\131\251\001\001" +
    "\000\004\126\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\127\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\116\277\001\001\000\006\125\276\131\251" +
    "\001\001\000\006\125\275\131\251\001\001\000\006\125" +
    "\274\131\251\001\001\000\006\125\273\131\251\001\001" +
    "\000\006\125\272\131\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\117" +
    "\302\131\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\047\323\050\322\051\320\055\321\056\317\122" +
    "\316\001\001\000\002\001\001\000\006\117\315\131\305" +
    "\001\001\000\004\120\311\001\001\000\002\001\001\000" +
    "\004\121\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\117\u0109\131\305\001\001\000\006" +
    "\117\u0108\131\305\001\001\000\006\117\u0107\131\305\001" +
    "\001\000\006\117\u0106\131\305\001\001\000\006\117\u0105" +
    "\131\305\001\001\000\004\111\360\001\001\000\002\001" +
    "\001\000\004\104\331\001\001\000\006\105\336\131\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\047" +
    "\346\050\352\051\351\110\347\001\001\000\002\001\001" +
    "\000\006\105\345\131\334\001\001\000\004\106\341\001" +
    "\001\000\002\001\001\000\004\107\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\355" +
    "\131\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\354\131\334\001\001\000\006\105\353\131\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\112\361\131\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\375\050" +
    "\u0101\051\377\115\u0100\001\001\000\002\001\001\000\006" +
    "\112\374\131\364\001\001\000\004\113\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\114\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\112\u0104\131\364\001\001\000\002" +
    "\001\001\000\006\112\u0103\131\364\001\001\000\002\001" +
    "\001\000\006\112\u0102\131\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u0115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u011b\001\001\000\004\067" +
    "\u0149\001\001\000\002\001\001\000\004\067\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\u0124\001\001\000\004\072\u0148\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\u0127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\u012b\001" +
    "\001\000\006\074\u012f\131\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\074\u0147\131" +
    "\u012d\001\001\000\022\047\u013d\050\u013b\051\u0139\052\u0137" +
    "\054\u013c\055\u013a\056\u0138\077\u013f\001\001\000\002\001" +
    "\001\000\004\075\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\074\u0146\131\u012d" +
    "\001\001\000\006\074\u0145\131\u012d\001\001\000\006\074" +
    "\u0144\131\u012d\001\001\000\006\074\u0143\131\u012d\001\001" +
    "\000\006\074\u0142\131\u012d\001\001\000\006\074\u0141\131" +
    "\u012d\001\001\000\006\074\u0140\131\u012d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u014d\001\001" +
    "\000\004\137\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u0153\001\001\000\004\140\u0169\001\001" +
    "\000\012\006\u015a\011\u0158\014\u0157\015\u0155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\u0158\014\u015c\015\u0155\001\001\000" +
    "\002\001\001\000\010\011\u0158\014\u0165\015\u0155\001\001" +
    "\000\002\001\001\000\010\011\u0158\014\u0164\015\u0155\001" +
    "\001\000\010\011\u0158\014\u0163\015\u0155\001\001\000\010" +
    "\011\u0158\014\u0162\015\u0155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u016a\001\001\000\002\001\001\000\004\004\u016c\001\001" +
    "\000\002\001\001\000\004\010\u0170\001\001\000\012\006" +
    "\u0172\011\u0158\014\u0157\015\u0155\001\001\000\002\001\001" +
    "\000\006\002\u0171\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    private boolean errores = false;
    private TablaSimbolosJson tablaSimbolosJson;
    private TablaSimbolosDef tablaSimbolosDef;
    private javax.swing.JTextArea taErrores;
    private TerminoDef termino;
    private StringBuilder codigoHtml;
    private String tipo;
    private int indice;
    private RolJson rolJson;
    private boolean agregar = true;

    public parser(java_cup.runtime.Scanner s, TablaSimbolosJson tablaSimbolosJson, javax.swing.JTextArea taErrores){
        this(s);
        this.tablaSimbolosJson = tablaSimbolosJson;
        this.taErrores = taErrores;
        this.tablaSimbolosDef = new TablaSimbolosDef();
        this.codigoHtml = new StringBuilder();
    }

    public StringBuilder getCodigoHtml(){
        return this.codigoHtml;
    }

    public boolean isErrores(){
        return errores;
    }

    public void imprimirTablaSimbolosoDef(){
        tablaSimbolosDef.imprimir();
    }

    public void syntax_error(Symbol s){
        errores = true;
        taErrores.append("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left + ". ");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        errores = true;
        taErrores.append("No se pudo recuperar el analizador. Linea:" + s.right + " Columna:" + s.left + "\n");
    }

    private void agregarErrorYaExiste(int numFila, String id){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". " + id + " ya existe.\n");
    }

    private void agregarErrorCasteo(int numFila){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". Tipos incompatibles.\n");
    }

    private void agregarErrorOperacionNoPermitida(int numFila){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". Operacion no permitida en un String.\n");
    }

    private void agregarErrorNoExisteVarJson(int numFila){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". No esta definido en el archivo JSON.\n");
    }

    private void agregarErrorNoExisteVarDef(int numFila, String lexema){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". La variable: " + lexema+" No existe.\n");
    }

    private void agregarErrorIndice(int numFila, String lexema){
        errores = true;
        taErrores.append("Error semantico. Linea:" + numFila +". La variable: " + lexema+" No es de tipo Integer.\n");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s0 ::= v0 s0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= MENOR_QUE h0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
agregar=false; termino = tablaSimbolosDef.getTermino(var1); if(termino == null){agregarErrorNoExisteVarDef(var1right, var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s0 ::= ID NT$0 v5 s0 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              String RESULT =null;
agregar = true; termino = new TerminoDef("String"); tipo = "String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // v0 ::= STRING NT$1 v1 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v0",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              String RESULT =null;
agregar = true; termino = new TerminoDef("Integer"); tipo = "Integer";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // v0 ::= INTEGER NT$2 v1 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v0",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // v0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba el tipo de dato\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v0",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(termino == null){termino = new TerminoDef(tipo);} termino.setId(var1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // v1 ::= ID NT$3 v2 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // v1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un id\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // v2 ::= ASIGNACION v3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
boolean agregado = tablaSimbolosDef.agregarTermino(termino); if(!agregado){agregarErrorYaExiste(var1right, termino.getId());} termino = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // v2 ::= COMA NT$4 v1 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // v2 ::= P_COMA 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		boolean agregado = tablaSimbolosDef.agregarTermino(termino); if(!agregado){agregarErrorYaExiste(var1right, termino.getId());}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // v2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba =, coma o punto y coma\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // v3 ::= exp v4 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 try{String tipo = (var1 instanceof Entero)? "Integer":"String";  if(tipo.equals(termino.getTipo())){termino.setValor(var1.toString()); if(agregar){boolean agregado = tablaSimbolosDef.agregarTermino(termino); if(!agregado){agregarErrorYaExiste(var1right, termino.getId());}}}else{agregarErrorCasteo(var1right);}}catch(Exception ex){agregarErrorOperacionNoPermitida(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // v3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un valor\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // v4 ::= P_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v4",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // v4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba punto y coma\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v4",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // v5 ::= ASIGNACION v3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v5",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // v5 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba =\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v5",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp MAS exp 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{if(var1 instanceof Entero && var2 instanceof Entero){RESULT= new Entero(((Entero)var1).getEntero() + ((Entero)var2).getEntero());}else{RESULT= new Cadena(var1.toString() + var2.toString());}}catch(Exception ex){agregarErrorCasteo(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT=new Entero(((Entero)var1).getEntero() - ((Entero)var2).getEntero());}catch(Exception ex){agregarErrorCasteo(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp POR exp 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT=new Entero(((Entero)var1).getEntero() * ((Entero)var2).getEntero());}catch(Exception ex){agregarErrorCasteo(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp DIVISION exp 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT=new Entero(((Entero)var1).getEntero() / ((Entero)var2).getEntero());}catch(Exception ex){agregarErrorCasteo(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= PARENTESIS_A exp PARENTESIS_C 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= valor 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor ::= CADENA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Cadena(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor ::= ENTERO 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Entero(Integer.valueOf(var1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= v6 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // v6 ::= RESULT v7 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v6",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // v7 ::= PUNTO v8 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v7",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // v7 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba punto\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v7",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // v8 ::= SCORE 
            {
              Object RESULT =null;
		RESULT=new Cadena(tablaSimbolosJson.getScore());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$5 ::= 
            {
              Object RESULT =null;
rolJson=RolJson.CLASE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // v8 ::= CLASES NT$5 c0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descClases = tablaSimbolosJson.getClases(); if(descClases==null){agregarErrorNoExisteVarJson(var2right);}else{RESULT=new Cadena(descClases);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$6 ::= 
            {
              Object RESULT =null;
rolJson=RolJson.VARIABLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // v8 ::= VARIABLES NT$6 a0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descVars = tablaSimbolosJson.getVariables(); if(descVars==null){agregarErrorNoExisteVarJson(var2right);}else{RESULT=new Cadena(descVars);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$7 ::= 
            {
              Object RESULT =null;
rolJson=RolJson.METODO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // v8 ::= METODOS NT$7 m0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descMets = tablaSimbolosJson.getMetodos(); if(descMets==null){agregarErrorNoExisteVarJson(var2right);}else{RESULT=new Cadena(descMets);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
rolJson=RolJson.COMENTARIO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // v8 ::= COMENTARIOS NT$8 o0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descComs = tablaSimbolosJson.getComentarios(); if(descComs==null){agregarErrorNoExisteVarJson(var2right);}else{RESULT=new Cadena(descComs);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // v8 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba SCORE, CLASES, VARIABLES, METODOS o COMENTARIOS\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c0 ::= CORCHETE_A c1 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c0 ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$9 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
indice = Integer.valueOf(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c1 ::= ENTERO NT$9 c2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descClas = tablaSimbolosJson.getClase(Integer.valueOf(var1)); if(descClas==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descClas);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
try{TerminoDef td = tablaSimbolosDef.getTermino(var1); if(td!=null){indice=Integer.valueOf(td.getValor());}else{agregarErrorNoExisteVarDef(var1right, var1);}}catch(Exception ex){agregarErrorIndice(var1right,var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c1 ::= ID NT$10 c2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descClas = tablaSimbolosJson.getClase(indice); if(descClas==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descClas);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // c1 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba el indice\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // c2 ::= CORCHETE_C c3 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // c2 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba corchete de cierre\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c3 ::= PUNTO c4 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // c3 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // c4 ::= NOMBRE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getNombre());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c4",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // c4 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba la palabra reservada NOMBRE\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c4",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // a0 ::= CORCHETE_A a1 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // a0 ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$11 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
indice = Integer.valueOf(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // a1 ::= ENTERO NT$11 a2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descVar = tablaSimbolosJson.getVariable(Integer.valueOf(var1)); if(descVar==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descVar);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$12 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
try{TerminoDef td = tablaSimbolosDef.getTermino(var1); if(td!=null){indice=Integer.valueOf(td.getValor());}else{agregarErrorNoExisteVarDef(var1right, var1);}}catch(Exception ex){agregarErrorIndice(var1right,var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // a1 ::= ID NT$12 a2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descVar = tablaSimbolosJson.getVariable(indice); if(descVar==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descVar);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // a1 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba el indice\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // a2 ::= CORCHETE_C a3 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // a2 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba corchete de cierre\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // a3 ::= PUNTO a4 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // a3 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // a4 ::= NOMBRE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getNombre());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // a4 ::= TIPO 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getTipo());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // a4 ::= FUNCION 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getFuncion());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // a4 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba la palabra reservada NOMBRE, TIPO o FUNCION\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // m0 ::= CORCHETE_A m1 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // m0 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$13 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
indice = Integer.valueOf(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // m1 ::= ENTERO NT$13 m2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descMet = tablaSimbolosJson.getMetodo(Integer.valueOf(var1)); if(descMet==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descMet);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
try{TerminoDef td = tablaSimbolosDef.getTermino(var1); if(td!=null){indice=Integer.valueOf(td.getValor());}else{agregarErrorNoExisteVarDef(var1right, var1);}}catch(Exception ex){agregarErrorIndice(var1right,var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // m1 ::= ID NT$14 m2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descMet = tablaSimbolosJson.getMetodo(indice); if(descMet==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descMet);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // m1 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba el indice\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // m2 ::= CORCHETE_C m3 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // m2 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba corchete de cierre\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // m3 ::= PUNTO m4 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // m3 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // m4 ::= NOMBRE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getNombre());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // m4 ::= TIPO 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getTipo());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // m4 ::= PARAMETROS 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Entero(termJ.getParametros());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // m4 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba la palabra reservada NOMBRE, TIPO o PARAMETROS\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // o0 ::= CORCHETE_A o1 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // o0 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$15 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
indice = Integer.valueOf(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // o1 ::= ENTERO NT$15 o2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descCom = tablaSimbolosJson.getComentario(Integer.valueOf(var1)); if(descCom==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descCom);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$16 ::= 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
try{TerminoDef td = tablaSimbolosDef.getTermino(var1); if(td!=null){indice=Integer.valueOf(td.getValor());}else{agregarErrorNoExisteVarDef(var1right, var1);}}catch(Exception ex){agregarErrorIndice(var1right,var1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // o1 ::= ID NT$16 o2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(var2==null){String descCom = tablaSimbolosJson.getComentario(indice); if(descCom==null){agregarErrorNoExisteVarJson(var1right);}else{RESULT=new Cadena(descCom);}}else{RESULT=var2;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // o1 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba el indice\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // o2 ::= CORCHETE_C o3 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // o2 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba corchete de cierre\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // o3 ::= PUNTO o4 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=var1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // o3 ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // o4 ::= TEXTO 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TerminoJson termJ = tablaSimbolosJson.encontrarTermino(rolJson, indice); if(termJ!=null){RESULT=new Cadena(termJ.getNombre());}else{agregarErrorNoExisteVarJson(var1right);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o4",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // o4 ::= error 
            {
              Object RESULT =null;
		taErrores.append("Se esperaba la palabra reservada TEXTO\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o4",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // h0 ::= HTML h1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // h0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada HTML\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // h1 ::= MAYOR_QUE h2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // h1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // h2 ::= MENOR_QUE h3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // h2 ::= INICIO_ETIQUETA h13 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // h2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba < o </\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // h3 ::= h5 h2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // h3 ::= h6 h2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // h3 ::= h7 h2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // h3 ::= h8 h2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // h3 ::= h9 h2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // h3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba h1,h2,br,table y for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // h5 ::= H1 ch0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h5",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // h6 ::= H2 cs0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h6",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // h7 ::= BR br0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h7",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // h8 ::= TABLE tabl0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h8",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // h9 ::= FOR for0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h9",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // h10 ::= TR tr0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h10",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // h11 ::= TH th0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h11",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // h12 ::= TD td0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h12",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // h13 ::= HTML h4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h13",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // h13 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada html\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h13",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // br0 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("br0",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // br0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("br0",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ch0 ::= MAYOR_QUE ch1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch0",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ch0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch0",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ch1 ::= INICIO_ETIQUETA ch2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch1",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ch1 ::= r0 ch1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch1",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ch1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </ o $$(\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch1",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ch2 ::= H1 ch3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ch2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba h1\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ch3 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch3",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ch3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ch3",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cs0 ::= MAYOR_QUE cs1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs0",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cs0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs0",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cs1 ::= INICIO_ETIQUETA cs2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs1",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cs1 ::= r0 cs1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs1",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cs1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </ o $$(\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs1",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cs2 ::= H2 cs3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cs2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba h2\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cs3 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs3",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // cs3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs3",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tr0 ::= MAYOR_QUE tr1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr0",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tr0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr0",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tr1 ::= INICIO_ETIQUETA tr2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr1",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tr1 ::= r0 tr1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr1",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tr1 ::= MENOR_QUE tr4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr1",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tr1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la <, $$( o </\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr1",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tr4 ::= h5 tr1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tr4 ::= h6 tr1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tr4 ::= h7 tr1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tr4 ::= h11 tr1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tr4 ::= h12 tr1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tr4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada h1,h2,br,th o td\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr4",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tr2 ::= TR tr3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr2",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tr2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba tr\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr2",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tr3 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr3",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // tr3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr3",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // td0 ::= MAYOR_QUE td1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td0",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // td0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td0",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // td1 ::= INICIO_ETIQUETA td2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // td1 ::= r0 td1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // td1 ::= MENOR_QUE td4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // td1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </, $$( o <\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // td4 ::= h5 td1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td4",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // td4 ::= h6 td1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td4",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // td4 ::= h7 td1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td4",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // td4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada h1,h2,br\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td4",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // td2 ::= TD td3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // td2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada td\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // td3 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("td3",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // td3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td3",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // th0 ::= MAYOR_QUE th1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th0",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // th0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th0",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // th1 ::= INICIO_ETIQUETA th2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th1",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // th1 ::= r0 th1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th1",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // th1 ::= MENOR_QUE th4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th1",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // th1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </, $$( o <\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th1",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // th4 ::= h5 th1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th4",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // th4 ::= h6 th1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th4",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // th4 ::= h7 th1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th4",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // th4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada h1,h2 o br\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th4",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // th2 ::= TH th3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th2",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // th2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada th\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th2",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // th3 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("th3",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // th3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th3",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // tabl0 ::= MAYOR_QUE tabl1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl0",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // tabl0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl0",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // tabl1 ::= INICIO_ETIQUETA tabl2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl1",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // tabl1 ::= r0 tabl1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl1",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // tabl1 ::= MENOR_QUE tabl4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl1",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // tabl1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </, $$( o <\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl1",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // tabl4 ::= h5 tabl1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // tabl4 ::= h6 tabl1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // tabl4 ::= h7 tabl1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // tabl4 ::= h9 tabl1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // tabl4 ::= h10 tabl1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tabl4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada h1,h2,br,for o tr\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl4",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tabl2 ::= TABLE tabl3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl2",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // tabl2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada table\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl2",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // tabl3 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl3",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // tabl3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabl3",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // for0 ::= ITERADOR for1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for0",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // for0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada iterador\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for0",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // for1 ::= DOS_PUNTOS for2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for1",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // for1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaban dos puntos\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for1",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // for2 ::= ENTERO for3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // for2 ::= ID for3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // for2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un entero o id\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // for3 ::= HASTA for4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for3",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // for3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada hasta\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for3",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // for4 ::= DOS_PUNTOS for5 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for4",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // for4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaban dos puntos\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for4",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // for5 ::= ENTERO for6 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for5",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // for5 ::= ID for6 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for5",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // for5 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un entero o id\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for5",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // for6 ::= P_COMA for7 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for6",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // for6 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba punto y coma\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for6",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // for7 ::= MAYOR_QUE for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for7",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // for7 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for7",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // for8 ::= INICIO_ETIQUETA for9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for8",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // for8 ::= r0 for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for8",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // for8 ::= MENOR_QUE for11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for8",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // for8 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba </, $$( o <\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for8",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // for11 ::= h5 for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // for11 ::= h6 for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // for11 ::= h7 for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // for11 ::= h8 for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // for11 ::= h10 for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // for11 ::= h11 for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // for11 ::= h12 for8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // for11 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba h1,h2,br,table,tr,th o td\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for11",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // for9 ::= FOR for10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for9",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // for9 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for9",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // for10 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for10",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // for10 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for10",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // r0 ::= INICIO_ACCESO r1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r0",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // r1 ::= v6 r2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r1",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // r1 ::= ID r2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r1",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // r1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un id o RESULT...\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r1",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // r2 ::= FIN_ACCESO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r2",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // r2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba )$$\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r2",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // h4 ::= MAYOR_QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("h4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // h4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba >\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
