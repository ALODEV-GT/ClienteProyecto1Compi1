
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorJson.cup;

import java_cup.runtime.Symbol;
import analizadorJson.tablaSimbolos.TablaSimbolosJson;
import analizadorJson.tablaSimbolos.TerminoJson;
import analizadorJson.tablaSimbolos.RolJson;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\107\002\000\002\005\005\000" +
    "\002\005\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\003\000\002\010\004\000\002\010" +
    "\003\000\002\011\004\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\037\004\000" +
    "\002\040\004\000\002\040\003\000\002\041\004\000\002" +
    "\041\003\000\002\110\002\000\002\042\005\000\002\042" +
    "\003\000\002\043\004\000\002\043\003\000\002\044\004" +
    "\000\002\044\003\000\002\044\003\000\002\013\004\000" +
    "\002\014\004\000\002\014\003\000\002\015\004\000\002" +
    "\015\003\000\002\016\004\000\002\016\003\000\002\017" +
    "\004\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\045\004\000\002\046\004\000" +
    "\002\046\003\000\002\047\004\000\002\047\003\000\002" +
    "\111\002\000\002\050\005\000\002\050\003\000\002\051" +
    "\004\000\002\051\003\000\002\052\004\000\002\052\003" +
    "\000\002\053\004\000\002\053\003\000\002\112\002\000" +
    "\002\054\005\000\002\054\003\000\002\055\004\000\002" +
    "\055\003\000\002\056\004\000\002\056\003\000\002\057" +
    "\004\000\002\057\003\000\002\113\002\000\002\060\005" +
    "\000\002\060\003\000\002\061\004\000\002\061\003\000" +
    "\002\062\004\000\002\062\003\000\002\062\003\000\002" +
    "\021\004\000\002\022\004\000\002\022\003\000\002\023" +
    "\004\000\002\023\003\000\002\024\004\000\002\024\003" +
    "\000\002\025\004\000\002\025\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\063\004\000\002" +
    "\064\004\000\002\064\003\000\002\065\004\000\002\065" +
    "\003\000\002\114\002\000\002\066\005\000\002\066\003" +
    "\000\002\067\004\000\002\067\003\000\002\070\004\000" +
    "\002\070\003\000\002\071\004\000\002\071\003\000\002" +
    "\115\002\000\002\072\005\000\002\072\003\000\002\073" +
    "\004\000\002\073\003\000\002\074\004\000\002\074\003" +
    "\000\002\075\004\000\002\075\003\000\002\116\002\000" +
    "\002\076\005\000\002\076\003\000\002\077\004\000\002" +
    "\077\003\000\002\100\004\000\002\100\003\000\002\100" +
    "\003\000\002\027\004\000\002\030\004\000\002\030\003" +
    "\000\002\031\004\000\002\031\003\000\002\032\004\000" +
    "\002\032\003\000\002\033\004\000\002\033\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\101" +
    "\004\000\002\102\004\000\002\102\003\000\002\103\004" +
    "\000\002\103\003\000\002\117\002\000\002\104\005\000" +
    "\002\104\003\000\002\105\004\000\002\105\003\000\002" +
    "\106\004\000\002\106\003\000\002\106\003\000\002\035" +
    "\004\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\006\003\004\016\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\330\001\002\000\006\003\007" +
    "\004\011\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\000\001\002\000\006\003\013\023\014\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\ufffb\001\002\000\006\003" +
    "\017\024\015\001\002\000\006\003\ufffa\022\ufffa\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufff8\001\002\000" +
    "\006\003\023\022\021\001\002\000\006\003\025\005\026" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufff6\001" +
    "\002\000\004\002\ufff7\001\002\000\004\002\ufff4\001\002" +
    "\000\006\003\027\023\030\001\002\000\004\002\ufff2\001" +
    "\002\000\006\003\032\020\034\001\002\000\004\002\ufff5" +
    "\001\002\000\004\002\ufff0\001\002\000\004\002\ufff3\001" +
    "\002\000\010\003\035\016\042\021\040\001\002\000\004" +
    "\002\uffed\001\002\000\004\002\uffef\001\002\000\004\002" +
    "\uffee\001\002\000\006\003\066\022\065\001\002\000\004" +
    "\002\ufff1\001\002\000\006\003\043\011\045\001\002\000" +
    "\004\002\uffea\001\002\000\004\002\uffec\001\002\000\006" +
    "\003\046\023\050\001\002\000\004\002\uffe8\001\002\000" +
    "\004\002\uffeb\001\002\000\006\003\052\024\051\001\002" +
    "\000\006\003\uffe7\017\uffe7\001\002\000\004\002\uffe5\001" +
    "\002\000\004\002\uffe9\001\002\000\006\003\056\017\057" +
    "\001\002\000\004\002\uffe6\001\002\000\004\002\uffe3\001" +
    "\002\000\010\003\062\021\040\022\060\001\002\000\004" +
    "\016\042\001\002\000\004\002\uffe4\001\002\000\004\002" +
    "\uffe0\001\002\000\004\002\uffe1\001\002\000\004\002\uffe2" +
    "\001\002\000\006\003\070\006\072\001\002\000\004\002" +
    "\uffdd\001\002\000\004\002\uffdf\001\002\000\004\002\uffdb" +
    "\001\002\000\004\002\uffde\001\002\000\006\003\073\023" +
    "\075\001\002\000\004\002\uffd9\001\002\000\004\002\uffdc" +
    "\001\002\000\006\003\076\020\100\001\002\000\004\002" +
    "\uffd7\001\002\000\004\002\uffda\001\002\000\010\003\104" +
    "\016\106\021\105\001\002\000\004\002\uffd6\001\002\000" +
    "\004\002\uffd5\001\002\000\004\002\uffd8\001\002\000\004" +
    "\002\uffd4\001\002\000\006\003\165\022\163\001\002\000" +
    "\006\003\107\011\110\001\002\000\004\002\uffd1\001\002" +
    "\000\006\003\112\023\114\001\002\000\004\002\uffd3\001" +
    "\002\000\004\002\uffcf\001\002\000\004\002\uffd2\001\002" +
    "\000\006\003\116\024\115\001\002\000\006\003\uffce\022" +
    "\uffce\001\002\000\004\002\uffcc\001\002\000\004\002\uffd0" +
    "\001\002\000\006\003\122\022\121\001\002\000\006\003" +
    "\124\013\126\001\002\000\004\002\uffca\001\002\000\004" +
    "\002\uffcd\001\002\000\004\002\uffc8\001\002\000\004\002" +
    "\uffcb\001\002\000\006\003\127\023\131\001\002\000\004" +
    "\002\uffc6\001\002\000\004\002\uffc9\001\002\000\006\003" +
    "\133\024\132\001\002\000\006\003\uffc5\022\uffc5\001\002" +
    "\000\004\002\uffc3\001\002\000\004\002\uffc7\001\002\000" +
    "\006\003\137\022\136\001\002\000\006\003\142\012\143" +
    "\001\002\000\004\002\uffc1\001\002\000\004\002\uffc4\001" +
    "\002\000\004\002\uffc2\001\002\000\004\002\uffbf\001\002" +
    "\000\006\003\144\023\146\001\002\000\004\002\uffbd\001" +
    "\002\000\004\002\uffc0\001\002\000\006\003\150\024\147" +
    "\001\002\000\006\003\uffbc\017\uffbc\001\002\000\004\002" +
    "\uffba\001\002\000\004\002\uffbe\001\002\000\006\003\153" +
    "\017\155\001\002\000\004\002\uffb8\001\002\000\004\002" +
    "\uffbb\001\002\000\010\003\161\021\105\022\156\001\002" +
    "\000\004\016\106\001\002\000\004\002\uffb6\001\002\000" +
    "\004\002\uffb9\001\002\000\004\002\uffb5\001\002\000\004" +
    "\002\uffb7\001\002\000\006\003\167\007\170\001\002\000" +
    "\004\002\uffb4\001\002\000\004\002\uffb2\001\002\000\004" +
    "\002\uffb3\001\002\000\004\002\uffb0\001\002\000\006\003" +
    "\171\023\173\001\002\000\004\002\uffae\001\002\000\004" +
    "\002\uffb1\001\002\000\006\003\174\020\176\001\002\000" +
    "\004\002\uffac\001\002\000\004\002\uffaf\001\002\000\010" +
    "\003\177\016\204\021\202\001\002\000\004\002\uffa9\001" +
    "\002\000\004\002\uffab\001\002\000\004\002\uffaa\001\002" +
    "\000\006\003\262\022\261\001\002\000\004\002\uffad\001" +
    "\002\000\006\003\205\011\207\001\002\000\004\002\uffa6" +
    "\001\002\000\004\002\uffa8\001\002\000\006\003\211\023" +
    "\212\001\002\000\004\002\uffa7\001\002\000\004\002\uffa4" +
    "\001\002\000\006\003\215\024\213\001\002\000\006\003" +
    "\uffa3\022\uffa3\001\002\000\004\002\uffa5\001\002\000\004" +
    "\002\uffa1\001\002\000\006\003\221\022\217\001\002\000" +
    "\006\003\222\013\223\001\002\000\004\002\uffa2\001\002" +
    "\000\004\002\uff9f\001\002\000\004\002\uff9d\001\002\000" +
    "\006\003\225\023\227\001\002\000\004\002\uffa0\001\002" +
    "\000\004\002\uff9b\001\002\000\004\002\uff9e\001\002\000" +
    "\006\003\231\024\230\001\002\000\006\003\uff9a\022\uff9a" +
    "\001\002\000\004\002\uff98\001\002\000\004\002\uff9c\001" +
    "\002\000\006\003\235\022\234\001\002\000\006\003\237" +
    "\014\240\001\002\000\004\002\uff96\001\002\000\004\002" +
    "\uff99\001\002\000\004\002\uff94\001\002\000\006\003\242" +
    "\023\244\001\002\000\004\002\uff97\001\002\000\004\002" +
    "\uff92\001\002\000\004\002\uff95\001\002\000\006\003\245" +
    "\025\247\001\002\000\004\002\uff8f\001\002\000\004\002" +
    "\uff93\001\002\000\006\003\uff91\017\uff91\001\002\000\006" +
    "\003\251\017\253\001\002\000\004\002\uff8d\001\002\000" +
    "\004\002\uff90\001\002\000\010\003\255\021\202\022\254" +
    "\001\002\000\004\016\204\001\002\000\004\002\uff8a\001" +
    "\002\000\004\002\uff8e\001\002\000\004\002\uff8b\001\002" +
    "\000\004\002\uff8c\001\002\000\006\003\264\010\266\001" +
    "\002\000\004\002\uff87\001\002\000\004\002\uff89\001\002" +
    "\000\004\002\uff85\001\002\000\004\002\uff88\001\002\000" +
    "\006\003\267\023\271\001\002\000\004\002\uff83\001\002" +
    "\000\004\002\uff86\001\002\000\006\003\272\020\274\001" +
    "\002\000\004\002\uff81\001\002\000\004\002\uff84\001\002" +
    "\000\010\003\277\016\302\021\300\001\002\000\004\002" +
    "\uff7f\001\002\000\004\002\uff82\001\002\000\004\002\uff7e" +
    "\001\002\000\006\003\326\017\327\001\002\000\004\002" +
    "\uff80\001\002\000\006\003\304\015\303\001\002\000\006" +
    "\003\306\023\310\001\002\000\004\002\uff7b\001\002\000" +
    "\004\002\uff7d\001\002\000\004\002\uff79\001\002\000\004" +
    "\002\uff7c\001\002\000\006\003\312\024\311\001\002\000" +
    "\006\003\uff78\017\uff78\001\002\000\004\002\uff76\001\002" +
    "\000\004\002\uff7a\001\002\000\006\003\315\017\317\001" +
    "\002\000\004\002\uff74\001\002\000\004\002\uff77\001\002" +
    "\000\010\003\323\021\300\022\320\001\002\000\004\016" +
    "\302\001\002\000\004\002\uff72\001\002\000\004\002\uff75" +
    "\001\002\000\004\002\uff71\001\002\000\004\002\uff73\001" +
    "\002\000\004\002\uff70\001\002\000\004\002\uff6e\001\002" +
    "\000\004\002\uff6f\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\015\001\001\000\004" +
    "\107\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\021\001\001\000\004\007\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\030\001\001\000\002\001\001\000\004" +
    "\011\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\040\013\036\037\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\066\001\001\000\002\001\001\000\004\040\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\052\001\001\000\004\110\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\062\044\060\001" +
    "\001\000\004\037\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\102\021" +
    "\101\045\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\163\001" +
    "\001\000\004\046\110\001\001\000\002\001\001\000\004" +
    "\047\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\116\001\001\000\004\111\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\122\001\001\000\004\052\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\133\001\001\000\004\112\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\137\001\001" +
    "\000\004\056\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\150\001\001\000\004\113\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\156\062\157\001\001" +
    "\000\004\045\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\202\027\200" +
    "\063\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\262\001\001\000\002\001\001" +
    "\000\004\064\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\213\001\001\000\004\114\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\217" +
    "\001\001\000\004\070\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\231\001\001\000\004\115\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\235\001\001\000" +
    "\004\074\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\116" +
    "\247\001\001\000\004\077\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\256\100\255\001\001\000" +
    "\004\063\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\275\035\274\101" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\324\001\001\000\002\001\001\000" +
    "\004\102\304\001\001\000\004\103\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\104\312\001\001\000\004\117\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\320" +
    "\106\321\001\001\000\004\101\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    private TablaSimbolosJson tablaSimbolos;
    private javax.swing.JTextArea taErrores;
    private boolean errores = false;
    private TerminoJson termino;

    public parser(java_cup.runtime.Scanner s, TablaSimbolosJson tablaSimbolos, javax.swing.JTextArea taErrores){
        this(s);
        this.tablaSimbolos = tablaSimbolos;
        this.taErrores = taErrores;
    }

    public boolean isErrores(){
        return errores;
    }

    public void syntax_error(Symbol s){
        errores = true;
        taErrores.append("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left + ". ");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        errores = true;
        taErrores.append("No se pudo recuperar el analizador. Linea:" + s.right + " Columna:" + s.left + "\n");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s0 ::= LLAVE_A s1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de apertura. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s1 ::= SCORE s2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Score. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s2 ::= DOS_PUNTOS s3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino = new TerminoJson(RolJson.SCORE,var1); tablaSimbolos.agregarTermino(termino);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s3 ::= LITERAL NT$0 s4 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un una \"literal\". \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s4 ::= COMA s5 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s5 ::= CLASES s6 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s5 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Clases. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s6 ::= DOS_PUNTOS s7 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s6 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s7 ::= CORCHETE_A s8 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s7 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba corchete apertura. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s8 ::= c0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s8 ::= s9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s8 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de apertura o corchete de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c0 ::= LLAVE_A c1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c1 ::= NOMBRE c2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // c1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Nombre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // c2 ::= DOS_PUNTOS c3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // c2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$1 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino = new TerminoJson(RolJson.CLASE, var1); tablaSimbolos.agregarTermino(termino);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // c3 ::= LITERAL NT$1 c4 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // c3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba una \"literal\". \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // c4 ::= LLAVE_C c5 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // c4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba LLave de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // c5 ::= COMA c0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // c5 ::= s9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // c5 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma o corchete de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s9 ::= CORCHETE_C s10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s9",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s10 ::= COMA s11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s10 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s10",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s11 ::= VARIABLES s12 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s11 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Variables. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s12 ::= DOS_PUNTOS s13 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // s12 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s12",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // s13 ::= CORCHETE_A s14 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s13",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // s13 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba corchete apertura. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s13",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s14 ::= v0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // s14 ::= s15 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // s14 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de apertura o corchete de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s14",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // v0 ::= LLAVE_A v1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // v1 ::= NOMBRE v2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // v1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Nombre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // v2 ::= DOS_PUNTOS v3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // v2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$2 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino = new TerminoJson(RolJson.VARIABLE, var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // v3 ::= LITERAL NT$2 v4 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // v3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba una \"literal\". \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // v4 ::= COMA v5 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // v4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // v5 ::= TIPO v6 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // v5 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Tipo. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // v6 ::= DOS_PUNTOS v7 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v6",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // v6 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v6",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$3 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino.setTipo(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // v7 ::= LITERAL NT$3 v8 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // v7 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba una \"literal\". \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // v8 ::= COMA v9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // v8 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v8",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // v9 ::= FUNCION v10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v9",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // v9 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Funcion. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v9",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // v10 ::= DOS_PUNTOS v11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v10",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // v10 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v10",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$4 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino.setFuncion(var1); tablaSimbolos.agregarTermino(termino);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // v11 ::= LITERAL NT$4 v12 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v11",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // v11 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba una \"literal\". \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v11",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // v12 ::= LLAVE_C v13 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v12",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // v12 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v12",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // v13 ::= COMA v0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v13",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // v13 ::= s15 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v13",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // v13 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma o corchete de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v13",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // s15 ::= CORCHETE_C s16 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s15",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // s16 ::= COMA s17 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s16",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // s16 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s16",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // s17 ::= METODOS s18 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // s17 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Metodos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s17",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // s18 ::= DOS_PUNTOS s19 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s18",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // s18 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s18",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // s19 ::= CORCHETE_A s20 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s19",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // s19 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba corchete apertura. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s19",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // s20 ::= m0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s20",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // s20 ::= s21 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s20",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // s20 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de apertura o corchete de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s20",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // m0 ::= LLAVE_A m1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // m1 ::= NOMBRE m2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // m1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Nombre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // m2 ::= DOS_PUNTOS m3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // m2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$5 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino = new TerminoJson(RolJson.METODO, var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // m3 ::= LITERAL NT$5 m4 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // m3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba una \"literal\". \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // m4 ::= COMA m5 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // m4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // m5 ::= TIPO m6 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // m5 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Tipo. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // m6 ::= DOS_PUNTOS m7 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // m6 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$6 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino.setTipo(var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // m7 ::= LITERAL NT$6 m8 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // m7 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba una \"literal\". \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // m8 ::= COMA m9 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // m8 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // m9 ::= PARAMETROS m10 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // m9 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Parametros. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // m10 ::= DOS_PUNTOS m11 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m10",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // m10 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m10",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$7 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino.setParametros(Integer.valueOf(var1)); tablaSimbolos.agregarTermino(termino);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // m11 ::= ENTERO NT$7 m12 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m11",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // m11 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba un numero entero. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m11",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // m12 ::= LLAVE_C m13 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m12",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // m12 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m12",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // m13 ::= COMA m0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m13",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // m13 ::= s21 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m13",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // m13 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma o corchete de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("m13",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // s21 ::= CORCHETE_C s22 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // s22 ::= COMA s23 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s22",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // s22 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s22",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // s23 ::= COMENTARIOS s24 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s23",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // s23 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba la palabra reservada Comentarios. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s23",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // s24 ::= DOS_PUNTOS s25 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s24",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // s24 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s24",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // s25 ::= CORCHETE_A s26 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s25",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // s25 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba corchete apertura. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s25",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // s26 ::= o0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s26",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // s26 ::= s27 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s26",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // s26 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de apertura o corchete de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s26",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // o0 ::= LLAVE_A o1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o0",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // o1 ::= TEXTO o2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o1",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // o1 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba Texto. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o1",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // o2 ::= DOS_PUNTOS o3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o2",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // o2 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba dos puntos. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o2",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$8 ::= 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
termino = new TerminoJson(RolJson.COMENTARIO, var1); tablaSimbolos.agregarTermino(termino);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // o3 ::= LITERAL NT$8 o4 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o3",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // o3 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba una \"literal\". \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o3",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // o4 ::= LLAVE_C o5 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o4",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // o4 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o4",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // o5 ::= COMA o0 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o5",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // o5 ::= s27 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o5",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // o5 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba coma o corchete de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o5",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // s27 ::= CORCHETE_C s28 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s27",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // s28 ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s28",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // s28 ::= error 
            {
              String RESULT =null;
		taErrores.append("Se esperaba llave de cierre. \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s28",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
